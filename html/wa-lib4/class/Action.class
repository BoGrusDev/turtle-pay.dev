<?php
/*
    ActioeClass

	Date: 2021-07-01

*/

class ActionClass extends ActionWa {

	//public $urlParam;
	public $eventId;
	/*
	public $headerName; 
	public $companyId;
	public $companyKnowAs;
	public $companyLogo;
	public $headerImageOn;
	*/
	public $event;
	public $selection;
	public $publicEvent;


	public $logOfferId;

	// -- public $webform;
	public $isMobile;
	public $setting;
	public $Setting;
	public $paymentText;
	public $footerLine1;
	
	public function getCompanyInfo() {
		// -- Get default wa_event_id, if set to 0, no default event exist
		// -- Company logo if has, has to be stored in filer /logo
		// -- wa_url Removed at the moment, not sure if its needed

		$sql = "SELECT company_name, known_as, wa_event_id, wa_url, wa_logo FROM company WHERE company_id = $this->companyId";
		$result = $this->_Get($sql);
		//$this->eventId = $result['wa_event_id'];
		$this->companyName = $result['company_name'];
		$this->companyKnownAs = $result['known_as'];
		$this->waUrl = $result['wa_url'];
		$this->companyLogo = $result['wa_logo'];
		if (strlen($this->companyLogo) > 4) {
			$this->headerImageOn = "y";
		}
		else {
			$this->headerImageOn = "n";
		}
		$this->headerBcolor = '#cccccc';
		$this->headerTcolor = "#000000";
		$this->headerName = $result['known_as'];

		$this->_Settings($this->companyId);
		$this->setSettings();
	}
	
	public function loadPublicEvent() {
		// Load opev event_status
		$sql = "SELECT event_id, event_name, event_url, wa_url, event_create_type, ref, participant_limit_show, wa_url_show ";
		$sql .= "FROM event_v4 ";
		$sql .= "WHERE company_id =$this->companyId AND event_status = 'p' AND private_on = 'y' AND webform_on = 'y'";
		$sql .= "ORDER BY event_id";

		$this->publicEvent = $this->_GetList($sql);

		//print_r($this->publicEvent[0]['event_id']);

		for ($i=0; $i<sizeof($this->publicEvent); $i++) {
			// Get the base event to check if max on
			$reply = $this->checkMax($this->publicEvent[$i]['event_id']);
			if ($reply->participant_limit_on == 'y') {
				$this->publicEvent[$i]['max_on'] = 'y';
				$this->publicEvent[$i]['max_number'] = $reply->max_number;
				$this->publicEvent[$i]['current_number'] = $reply->current_number;
				$this->publicEvent[$i]['place_left'] = $reply->place_left;
				$this->publicEvent[$i]['event_full'] = $reply->event_full;
			}		
			else {
				$this->publicEvent[$i]['max_on'] = 'n';
			}
		}
		// print_r($this->publicEvent);
	}

	public function loadEventByEventId() {
		// -- Load the current event by $eventId
		$sql = "SELECT * FROM event_v4 WHERE event_id = $this->eventId AND event_status = 'p' AND webform_on = 'y'";
		$result = $this->_Get($sql);

	
		if ($result['code'] == "1") {
			//print_r($result); die('');
			$this->event = $result;
			$this->eventId = $this->event['event_id'];

			if ($this->event['participant_on'] == 'y') {
				//$sql = "SELECT * FROM event_selection_setting WHERE event_id = $this->eventId ORDER BY sortorder";
				$sql = "SELECT * FROM event_selection_setting WHERE event_id = $this->eventId ORDER BY event_selection_setting_id"; // TDB 2021-09-21
				//echo $sql; die('');
				$this->selection = $this->_GetList($sql);
				for ($i = 0; $i < sizeof($this->selection); $i++) {
					$sql = "SELECT * FROM event_option_setting WHERE event_selection_setting_id = " . $this->selection[$i]['event_selection_setting_id']  .   " ORDER BY sortorder";
					$this->selection[$i]['option'] = $this->_GetList($sql);
				}
			}
			return true;
		}
		else {
			return false;
		}
	}

	public function loadEventByUrl() {
		// -- Load the current event by $eventId
		$sql = "SELECT * FROM event_v4 WHERE company_id = $this->companyId AND event_url = '$this->eventUrl' AND event_status = 'p' AND private_on = 'y' AND webform_on = 'y'";
		$this->event = $this->_Get($sql);
		if ($this->event['code'] == "1") {
			$this->eventId = $this->event['event_id'];
			if ($this->event['participant_on'] == 'y') {
				$sql = "SELECT * FROM event_selection_setting WHERE event_id = $this->eventId ORDER BY sortorder";
				//echo $sql; die('');
				$this->selection = $this->_GetList($sql);
				for ($i = 0; $i < sizeof($this->selection); $i++) {
					$sql = "SELECT * FROM event_option_setting WHERE event_selection_setting_id = " . $this->selection[$i]['event_selection_setting_id']  .   " ORDER BY sortorder";
					$this->selection[$i]['option'] = $this->_GetList($sql);
				}
			}
			return true;
		}
		else {
			return false;
		}
		//print_r($this->selection); die('');
	}

	public function loadEventByInvoiceEvent($urlCode) {

		$sql = "SELECT ie.event_id, i.invoice_event_item_id, i.parent_event_item_id, i.event_item_id, i.invoice_event_id, i.email, i.referens, i.amount, ";
		$sql .= "i.invoice_event_item_status, ie.invoice_event_status ";
		$sql .= "FROM invoice_event_item i, invoice_event ie ";
		$sql .= "WHERE invoice_event_item_code = '$urlCode' AND ie.invoice_event_id = i.invoice_event_id ";
		$sql .= "AND i.invoice_event_item_status IN ('s','r')";
		$this->invoiceEvent = $this->_Get($sql);
		
		if ($this->invoiceEvent['code'] == "1") {
			return true;
		}
		else {
			return false;
		}
	}

	// New 202107-09
	public function loadParentEventItem() {
		$sql = "SELECT email, mobile, referens, infobox_1, infobox_2 FROM event_item_v4 ";
		$sql .= "WHERE event_item_id = " . $this->invoiceEvent['parent_event_item_id']; 
		$this->parentEventItem = $this->_Get($sql);

		$sql = "SELECT COUNT(*) participant_number FROM event_participant ";
		$sql .= "WHERE event_item_id = " . $this->invoiceEvent['parent_event_item_id'] . " AND event_participant_status = 'c'"; 
		$res = $this->_Get($sql);

		$this->parentEventItem['participant_number'] = $res['participant_number'];
		$this->inheritEventItemId =  $this->invoiceEvent['parent_event_item_id'];

	}

	private function _participantCount($baseEventId) {
		$sql = "SELECT COUNT(*) AS current_number ";
		$sql .= "FROM event_participant p, event_item_v4 i, invoice_request r, event_v4 e ";
		$sql .= "WHERE ";
		// $sql .= "i.event_id IN ($eventId) AND ";
		$sql .= "e.base_event_id = $baseEventId AND ";
		$sql .= "e.inherit_event_id = '0' AND ";
		$sql .= "i.event_item_id = p.event_item_id AND "; 
		$sql .= "i.event_item_status = 'c' AND ";
		$sql .= "i.event_id = e.event_id AND ";
		$sql .= "i.approved_code = r.approved_code  "; // AND
		// echo $sql; die('');
		$res = $this->_Get($sql);
		// print_r($res); die('');
		return $res['current_number'];
	}

	public function checkMax($eventId) {
		
		$reply = new stdClass();
		$sql = "SELECT base_event_id, participant_limit_on, participant_max FROM event_v4 where event_id = $eventId";
		$res = $this->_Get($sql);
		$baseEventId = $res['base_event_id'];
		$reply->participant_limit_on = $res['participant_limit_on'];
		$reply->participant_max = $res['participant_max'];
		$reply->event_full = 'n'; // default
		if ($reply->participant_limit_on == 'y') {
			$sql = "SELECT participant_max FROM event_v4 where event_id = $baseEventId";
			$res = $this->_Get($sql);
			$reply->max_number = $res['participant_max'];

			$sql = "SELECT COUNT(*) AS current_number ";
			$sql .= "FROM event_participant p, event_item_v4 i, invoice_request r, event_v4 e ";
			$sql .= "WHERE ";
			// $sql .= "i.event_id IN ($eventId) AND ";
			$sql .= "e.base_event_id = $baseEventId AND ";
			$sql .= "e.inherit_event_id = '0' AND ";
			$sql .= "i.event_item_id = p.event_item_id AND "; 
			$sql .= "i.event_item_status = 'c' AND ";
			$sql .= "i.event_id = e.event_id AND ";
			$sql .= "i.approved_code = r.approved_code AND ";
			$sql .= "p.event_participant_status = 'c'";
			// echo $sql; die('');
			$res = $this->_Get($sql);
			//print_r($res); die('');
			$reply->current_number = $res['current_number'];

			if ($reply->current_number < $reply->max_number) {
				//$reply->code = '1';
				$reply->event_full = 'n';
				$reply->place_left = $reply->max_number - $reply->current_number;
			}
			else {
				$reply->event_full = 'y';
				$reply->place_left = 0;
				// $reply->code = '0';
			}	
		}
		return $reply;
	}

	public function setSettings() {
		// ---
		// --- Load deom Settings data Table
		// ---

		//$this->_Settings($data->_company_id);

		$this->paymentText = 'Betalning sker mot ' . $this->Setting->first_Invoice_due_days . ' dagars faktura ';
		$this->paymentText .= '<i>(';
		if ($this->Setting->first_invoice_start_fee > 0) {
			$this->paymentText .= 'Uppläggningsavg. ' . round($this->Setting->first_invoice_start_fee, 0) . 'kr, ';
		}
		$this->paymentText .= '0' . '% ränta  under ' . $this->Setting->credit_interest_grace_days . ' dagar och ' . round($this->Setting->first_invoice_fee, 0) . ' kr i aviavg.)</i> ';
		$this->paymentText .= 'som skickas till din e-postadress efter att du har bekräftat med BankID nedan.';
		$this->paymentText .= ' Fakturan kan även delbetalas i upp till ' . $this->Setting->repayment_term . ' månader ';
		$this->paymentText .= '<i>(' . $this->Setting->customerInterest . '% ränta och ' . round($this->Setting->monthly_invoice_fee, 0)  . ' kr i aviavg.';
		if ($this->Setting->administration_fee > 0) {
			$this->paymentText .= ' Adm. avg. ' . round($this->Setting->administration_fee, 0) . 'kr/mån';
		}
		$this->paymentText .= ', effektiv ränta ' . $this->Setting->effective_rate . '% på 10 000 kr)</i>. ';
		$this->paymentText .= ' Se villkor under <a href="https://www.turtle-pay.com/villkor" target="_blank">www.turtle-pay.com/villkor</a>';
		$this->paymentText .= ' och integritetspolicy <a href="https://www.turtle-pay.com/integritetspolicy" target="_blank">www.turtle-pay.com/integritetspolicy</a>.';

		// GDPR
		$this->paymentText .=  ' Du samtycker samtidigt att Turtle Pay behandlar dina personuppgifter åt ';
		$this->paymentText .= $this->companyName; 
		$this->paymentText .=  ', enligt deras integritetspolicy.';

		$this->footerLine1 = $this->companyName . " i samarbete med Turtle Pay AB.";  // $this->companyKnownAs
		
		$this->bankidText = '<b>Jag har BankID på denna enhet</b>';
		$this->confirmLabel = 'Bekräfta';
		
	}

	function _Settings($company_id = null, $people_id = null) {

		// 2018-10-05
		//
		// Settings settting_typ
		// s = system base
		// c = _company
		// p = personalbonus

		// Load standard Settings
		$sql = "SELECT * FROM setting WHERE setting_type = 's' ORDER BY setting_id DESC LIMIT 1";
		$baseResult = $this->_Get($sql);

		if (isset($company_id)) {
			$sql = "SELECT * FROM setting WHERE setting_type = 'c' AND id = $company_id AND status_setting = 'a' ORDER BY setting_id DESC LIMIT 1";
			$companyResult = $this->_Get($sql);
			foreach ($companyResult as $key => $value) {
				if ($value != null) {
					$baseResult[$key] =  $value;
				}
			}
		}

		if (isset($people_id)) {
			$sql = "SELECT * FROM setting WHERE setting_type = 'p' AND id = $people_id AND status_setting = 'a' ORDER BY setting_id DESC LIMIT 1";
			$peopleResult = $this->_Get($sql);
			if (sizeof($peopleResult) > 0) {
				foreach ($peopleResult as $key => $value) {
					if ($value != null) {
						$baseResult[$key] =  $value;
					}
				}
			}
		}

		$this->Setting = (object) $baseResult;

		$this->Setting->customerInterest = (float) $this->Setting->base_interest + (float)$this->Setting->customer_interest_margin;
		//print_r($this->Setting);

	}

	public function getEventFromWaLog($approvedCode) {

		$sql = "SELECT event_id, wa_log_id FROM wa_log_v4 ";
		//$sql .= "WHERE approved_code = '$approvedCode'";
		$sql .= "WHERE order_ref = '$approvedCode'";
		$result = $this->_Get($sql);
		if ($result['code'] == "1") {
			$this->eventId = $result['event_id'];
			$this->logId = $result['wa_log_id'];
			return true;
		}
		else {
			return false;
		}
		/*
		echo '<pre>';
		print_r($result); 
		echo '</pre>';
		die('');
		*/
		
	}

	public function setDenied($invoiceEventItemId) {
		// Get the InvoiceItemId 
		//-- $sql = "SELECT invoice_event_item_id FROM event_item_v4 WHERE event_item_id = $eventId";
		// -- $res = $this->_Get($sql);
		// if (isset($res['invoice_event_item_id'])) {
			// if ($res['invoice_event_item_id'] > 0) {

		$paramUpdate = array();
		$paramUpdate['invoice_event_item_status'] = 'd';
		$reply = $this->_Update('invoice_event_item', 'invoice_event_item_id', $invoiceEventItemId, $paramUpdate);

				//return json_encode($reply);
			//}
		//}
	
	}

	public function getOfferFromLog($orderRef) {

		/*
			SELECT wa_log_offer_id FROM wa_log_offer 
			WHERE order_ref = '67f16777-8bb1-4370-b63d-b81e7e2a0c65'
		*/

		$sql = "SELECT wa_log_offer_id FROM wa_log_offer ";
		$sql .= "WHERE order_ref = '$orderRef' ";
		$result = $this->_Get($sql);
		if ($result['code'] == "1") {
			$this->logOfferId = $result['wa_log_offer_id'];
			return true;
		}
		else {
			return false;
		}
		/*
		echo '<pre>';
		print_r($result); 
		echo '</pre>';
		die('');
		*/
		
	}

	// New 2021-12-16 
	public function chekAndGetSelections() {
		
		$reply = new stdClass();
		
		if ($this->selection == true && sizeof($this->selection) > 0 ) {
			for ($i = 0; $i < sizeof($this->selection); $i++) { 
				for ($j = 0; $j < sizeof($this->selection[$i]['option']); $j++) { 
					if ($this->selection[$i]['option'][$j]['event_option_setting_id'] > 0) {
						// Load base event option
						$sql = "SELECT * FROM event_option_setting WHERE event_option_setting_id = " . $this->selection[$i]['option'][$j]['event_option_setting_id'];
						$baseOption = $this->_Get($sql);
						
						if ($baseOption['max_on'] == 'y') {
							
							// Get all options included (base and grouped)
							$sql = "SELECT event_option_setting_id FROM event_option_setting WHERE event_option_setting_id = " . $this->selection[$i]['option'][$j]['event_option_setting_id'];
							$resOptions = $this->_GetList($sql);
							$optionIds = '';
						
							for ($k=0; $k<sizeof($resOptions); $k++) {
								$optionIds .= $resOptions[$k]['event_option_setting_id'] . ',';
							}
							$optionIds = substr($optionIds, 0, -1);
							
							$sql = "SELECT COUNT(*) AS counter FROM event_option o, event_participant p, event_item_v4 e ";
							$sql .= "WHERE o.event_option_setting_id = " .  $this->selection[$i]['option'][$j]['event_option_setting_id'] . " AND ";
							$sql .= "o.event_participant_id = p.event_participant_id AND ";
							$sql .= "p.event_item_id = e.event_item_id AND e.event_item_status = 'c' ";
							$sql .= "AND o.event_option_status = 'c' ";
							// echo $sql; die('');
							$res = $this->_Get($sql);
							$this->selection[$i]['option'][$j]['counter'] = $res['counter'];
						}
					}
				}
			}
		}
		// echo '<pre>';
		// print_r($this->selection);

		
		// echo '<pre>';
		// print_r($this->selection); 
		// die('');
	}
	
	public function selectionValidate() {
		
		//
		// Load all selection option in paren
		//
		$sql = "SELECT os.event_selection_setting_id, o.* FROM event_option o, event_participant p, event_option_setting os ";
		$sql .= "WHERE p.event_item_id = $this->inheritEventItemId AND ";
		$sql .= "p.event_participant_id = o.event_participant_id AND ";
		$sql .= "o.event_option_setting_id = os.event_option_setting_id";
		$resOption = $this->_GetList($sql); 

		$this->selectionStatus = array();
		for ($i=0; $i<sizeof($this->selection); $i++) {
			$record = new stdClass();
			$record->id = $this->selection[$i]['event_selection_setting_id'];
			$record->parent_id = $this->selection[$i]['parent_event_selection_setting_id'];
			$record->on = 'n';
			// check if exist in parent
			for ($j=0; $j<sizeof($resOption); $j++) { 
				if ($resOption[$j]['event_selection_setting_id'] == $record->parent_id && $resOption[$j]['event_option_status'] == 'c') {
					$record->on = 'y';
				}
			}
			array_push($this->selectionStatus, $record);
		}

		/*
		echo '<pre>';
		print_r($this->selectionStatus); 
		print_r($resOption); 
		*/
		
	}
}
	/*
	public function _1_chekAndGetSelections() {
		
		$reply = new stdClass();
		
		if ($this->selection == true && sizeof($this->selection) > 0 ) {
			for ($i = 0; $i < sizeof($this->selection); $i++) { 
				for ($j = 0; $j < sizeof($this->selection[$i]['option']); $j++) { 
					if ($this->selection[$i]['option'][$j]['base_event_option_setting_id'] > 0) {
						// Load base event option
						$sql = "SELECT * FROM event_option_setting WHERE event_option_setting_id = " . $this->selection[$i]['option'][$j]['base_event_option_setting_id'];
						$baseOption = $this->_Get($sql);
						
						if ($baseOption['max_on'] == 'y') {
							
							// Get all options included (base and grouped)
							$sql = "SELECT event_option_setting_id FROM event_option_setting WHERE base_event_option_setting_id = " . $this->selection[$i]['option'][$j]['base_event_option_setting_id'];
							$resOptions = $this->_GetList($sql);
							$optionIds = '';
						
							for ($k=0; $k<sizeof($resOptions); $k++) {
								$optionIds .= $resOptions[$k]['event_option_setting_id'] . ',';
							}
							$optionIds = substr($optionIds, 0, -1);
							
							$sql = "SELECT COUNT(*) AS counter FROM event_option o, event_participant p, event_item_v4 e ";
							$sql .= "WHERE o.event_option_setting_id IN ($optionIds) AND ";
							$sql .= "o.event_participant_id = p.event_participant_id AND ";
							$sql .= "p.event_item_id = e.event_item_id AND e.event_item_status = 'c' ";
							$sql .= "AND o.event_option_status = 'c' ";
							$res = $this->_Get($sql);
							$this->selection[$i]['option'][$j]['counter'] = $res['counter'];
						}
					}
				}
			}
		}
		
		// echo '<pre>';
		// print_r($this->selection); 
		// die('');
	}

	public function _chekAndGetSelections() {

		/ *
			SELECT COUNT(*) AS counter FROM event_option o, event_participant p, event_item_v4 e 
			WHERE event_option_setting_id = 671 AND o.event_participant_id = p.event_participant_id AND 
			p.event_item_id = e.event_item_id AND e.event_item_status = 'c';
		* /
		$reply = new stdClass();
		// if (sizeof($this->selection) > 0) {
		if ($this->selection == true && sizeof($this->selection) > 0 ) {
			for ($i = 0; $i < sizeof($this->selection); $i++) { 
				for ($j = 0; $j < sizeof($this->selection[$i]['option']); $j++) { 
					//if (!isset($this->selection[$i]['option'][$j]['max_on'])) {
						if ($this->selection[$i]['option'][$j]['max_on'] == 'y') {
							$sql = "SELECT COUNT(*) AS counter FROM event_option o, event_participant p, event_item_v4 e ";
							$sql .= "WHERE event_option_setting_id = " . $this->selection[$i]['option'][$j]['event_option_setting_id']  . " AND ";
							$sql .= "o.event_participant_id = p.event_participant_id AND ";
							$sql .= "p.event_item_id = e.event_item_id AND e.event_item_status = 'c'";
							$sql .= " AND o.event_option_status = 'c'";
							$res = $this->_Get($sql);
							
							$this->selection[$i]['option'][$j]['counter'] = $res['counter'];
						}
					//}
				}
			}
		}
	}
	*/
	
