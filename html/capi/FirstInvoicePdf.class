<?php
/*

    FirstInvoicePdf

    20200-01-09

	sudo chmod -R 777 /var/www/html/f-invoice
*/

use setasign\Fpdi;

class FirstInvoicePdfClass {

	private $setting;

	private $invoice;  
	private	$extra;
	private $pageNo;
	private $totalPages;
	private $refundAll;
	

	public function __construct($folder) {
		$this->setting = new stdClass();
		$this->setting->folder = $folder;
        $this->setting->mallFirstPage = "fakturamall.pdf";;
		$this->setting->mallContinuePage = "empty.pdf";;
		$this->setting->font = 'Helvetica';
		$this->setting->maxRowsPageOne = 60;
		$this->setting->maxRowsContinuePageOne = 204;
		$this->pageNo = 1;
	}

	public function _($invoice) {
		$this->invoice = $invoice;
		require('fpdf181/fpdf.php');
		require_once('ftpi/autoload.php');
		$this->pdf = new Fpdi\Fpdi();
		$this->pdf->AddFont('OCR-B','','ocrb.php');
		$this->firstPageAdd();

		if ($this->invoice->spec->tdb_on == 'y') {
			$this->fakturaTdb();
		}
		else {
			$this->fakturaStandard();
		}

		// Crteate the PDF-file
		$filename = $this->setting->folder . $this->invoice->invoice_filename;
		try {
			$this->pdf->Output($filename,'F');
		}
		catch(Exception $e) {
			echo 'Message: ' .$e->getMessage();
		}
	}

	private function firstPageAdd() {
		$this->pdf->setSourceFile($this->setting->mallFirstPage);
		$templateId = $this->pdf->importPage($this->pageNo);
		$size = $this->pdf->getTemplateSize($templateId);
		$this->pdf->AddPage('P', array($size['width'], 310));
		$this->pdf->useTemplate($templateId);
		$this->pdf->SetFont($this->setting->font);
		$this->extra = 0;
		if ($this->invoice->returnInvoice == "y") {
			$this->extra = 5;
		}
	}

	private function fakturaStandard() {

		//echo json_encode($this->invoice); die('');

		$this->totalPages = 1;
		$this->_headerWrite();
		$this->_specHeader();
		if (!isset($this->invoice->specOn) || $this->invoice->specOn == "n") {
			// do nothing (no specification)
		}
		else {
			//echo sizeof($this->invoice->spec->participant[0]->option); die(''); 
			if (sizeof($this->invoice->spec->participant[0]->option) <= 2) {
				// Short version, max 3 selections
				$this->pdf->SetFont($this->setting->font,'B');
				$this->pdf->SetFontSize(8);
				$this->pdf->SetXY(20, 112 + $this->extra);
				$this->pdf->Write(10, utf8_decode('Namn'));
			
				$this->pdf->SetFont('');
				$this->pdf->SetFont($this->setting->font);
				$this->pdf->SetFontSize(8);
	
				for ($i=0; $i < sizeof($this->invoice->spec->participant); $i++) {
					$plusRow = ($i + 1) * 4;
					$this->pdf->SetXY(20, 112 + $this->extra + $plusRow);
					$this->pdf->Write(10, utf8_decode($this->invoice->spec->participant[$i]->first_name . ' ' . $this->invoice->spec->participant[$i]->last_name));
					
				} 
				$this->pdf->SetFont($this->setting->font,'B');
				$this->pdf->SetFontSize(8);
	
				for ($i=0; $i < sizeof($this->invoice->spec->participant[0]->option); $i++) {
					$plusCol = ($i) * 42; // 34
					$this->pdf->SetXY( 70 + $plusCol, 112 + $this->extra );
					$this->pdf->Write(10, utf8_decode($this->invoice->spec->participant[0]->option[$i]->sel_label));
				} 
				// Check if has note
				$hasNote = false;
				for ($i=0; $i < sizeof($this->invoice->spec->participant); $i++) {
					if (strlen($this->invoice->spec->participant[$i]->note) > 1) {
						$hasNote = true;
					}
				}
				if ($hasNote) {
					$plusCol = (sizeof($this->invoice->spec->participant[0]->option)) * 42; // 34
					$this->pdf->SetXY( 70 + $plusCol, 112 + $this->extra);
					$this->pdf->Write(10, utf8_decode($this->invoice->spec->note_label));
				}
				$this->pdf->SetFont('');
				$this->pdf->SetFont($this->setting->font);
				$this->pdf->SetFontSize(8);
				for ($i=0; $i < sizeof($this->invoice->spec->participant); $i++) {
					$plusRow = ($i + 1) * 4;
					for ($j=0; $j < sizeof($this->invoice->spec->participant[$i]->option); $j++) {
						$plusCol = ($j) * 42; // 34
						$this->pdf->SetXY( 70 + $plusCol, 112 + $this->extra + $plusRow );
						$this->pdf->Write(10, utf8_decode($this->invoice->spec->participant[$i]->option[$j]->option_text));
					} 
					if (strlen($this->invoice->spec->participant[$i]->note) > 0) {
						$plusCol = (sizeof($this->invoice->spec->participant[$i]->option)) * 42; // 34
						$this->pdf->SetXY( 70 + $plusCol, 112 + $this->extra + $plusRow );
						$this->pdf->Write(10, utf8_decode($this->invoice->spec->participant[$i]->note));
					}
				}
			}
			else  {
				// More the 3 selections
				$this->pdf->SetFont($this->setting->font,'B');
				$this->pdf->SetFontSize(8);
				$specRow = -1 + $this->extra; // Fix
				for ($i=0; $i < sizeof($this->invoice->spec->participant); $i++) {
					$specRow = $specRow + 4;
					$this->pdf->SetFont($this->setting->font,'B');
					$this->pdf->SetFontSize(8);
					$this->pdf->SetXY(20, 102 + $specRow);
					$this->pdf->Write(10, utf8_decode($this->invoice->spec->participant[$i]->first_name . ' ' . $this->invoice->spec->participant[$i]->last_name));
					$rowText = '';
					
					// echo json_encode($this->invoice->spec->participant); die('');


					$columnCounter = 0;
					for ($j=0; $j < sizeof($this->invoice->spec->participant[$i]->option); $j++) {
						if ($columnCounter > 6) {
							$rowText = rtrim($rowText, ', ');
							$this->pdf->SetFont('');
							$this->pdf->SetFont($this->setting->font);
							$this->pdf->SetFontSize(7);
							$specRow = $specRow + 3;
							$this->pdf->SetXY(20, 102 + $specRow);
							$this->pdf->Write(10, utf8_decode($rowText));
							$rowText = '';
							$columnCounter = 0;
						}
	
						if ($this->invoice->spec->participant[$i]->option[$j]->option_text == 'Ej vald') {
							// skip
						}
						else {
							$columnCounter++;
							$rowText .= $this->invoice->spec->participant[$i]->option[$j]->option_text . ', ';
						}
					
					}
					$rowText = rtrim($rowText, ', ');
					$this->pdf->SetFont('');
					$this->pdf->SetFont($this->setting->font);
					$this->pdf->SetFontSize(7);
					$specRow = $specRow + 3;
					$this->pdf->SetXY(20, 102 + $specRow);
					$this->pdf->Write(10, utf8_decode($rowText));
	
					$note = trim($this->invoice->spec->participant[$i]->note);
					if (strlen($note) > 0) {
						$specRow = $specRow + 3; 
						$rowText = $this->invoice->spec->participant[$i]->note; //  . ', ';
						//$rowText = rtrim($rowText, ', ');
						$this->pdf->SetFont('');
						$this->pdf->SetFont($this->setting->font);
						$this->pdf->SetFontSize(7);
						$this->pdf->SetXY(20, 102 + $specRow);
						$this->pdf->Write(10, utf8_decode($rowText));
					}
				}
			} 
		}
		$this->_installmentWrite();
		$this->_footerWrite();
		$this->_bankgiroCard();
	}

	private function fakturaTdb() {
		// If spec on separate pages

		// Calculate total rows
		$totalRows = sizeof($this->invoice->spec->participant) * 6;
		for ($i=0; $i < sizeof($this->invoice->spec->participant); $i++) {
			$totalRows +=  (sizeof($this->invoice->spec->participant[$i]->option) * 4);
		}
		if ($totalRows <= $this->setting->maxRowsPageOne) {
			$this->totalPages = 1;
			$currentRow = 93;
		}
		else {
			$this->totalPages = ceil($this->totalPages = $totalRows / $this->setting->maxRowsContinuePageOne) + 1;
		}
		$this->_headerWrite();
		$this->_specHeader();
		$this->_installmentWrite();
		$this->_footerWrite();
		$this->_bankgiroCard();
		// Se specifikation på nästa sida.
	
		if ($this->totalPages > 1) {
			$this->pdf->SetFont('');
			$this->pdf->SetFont($this->setting->font);
			$this->pdf->SetFontSize(10);
			$this->pdf->SetXY(20, 100);
			$this->pdf->Write(10, utf8_decode('Se specifikation på nästa sida.'));
			$this->_continuePageAdd();
			$this->_headerWrite();
			$this->_specHeaderContine();
			$currentRow = 68;
			// Fortsättning från föregående sida
		}
	
		$this->pdf->SetFont($this->setting->font,'B');
		$this->pdf->SetFontSize(8);
		for ($i=0; $i < sizeof($this->invoice->spec->participant); $i++) {
			//for ($i=0; $i < 6; $i++) {
			if ($this->totalPages > 1) {
			// Check if nned page break
				$nextPartRows = $currentRow + 6 + (sizeof($this->invoice->spec->participant[$i]->option) * 4);
				if ($nextPartRows > $this->setting->maxRowsContinuePageOne + 68) {
					// New page
					// echo $currentRow;
					$this->pdf->SetFont('');
					$this->pdf->SetFont($this->setting->font);
					$this->pdf->SetFontSize(10);
					$this->pdf->SetXY(20, 278);
					$this->pdf->Write(10, utf8_decode('Fortsättning på nåsta sida.'));
					// Fortsättning från föregående sida
					$this->_continuePageAdd();
					$this->_headerWrite();
					$this->_specHeaderContine();
					$currentRow = 68;
				}
			}
			$currentRow = $currentRow + 6;
			$this->pdf->SetFont($this->setting->font,'B');
			$this->pdf->SetFontSize(9);
			$this->pdf->SetXY(20, $currentRow);
			$partHeader = $this->invoice->spec->participant[$i]->first_name . ' ' . $this->invoice->spec->participant[$i]->last_name . ' - ' . $this->invoice->spec->participant[$i]->note;
			$this->pdf->Write(10, utf8_decode($partHeader));
		
			$this->pdf->SetFont('');
			$this->pdf->SetFont($this->setting->font);
			$this->pdf->SetFontSize(8);
			
			if (sizeof($this->invoice->spec->participant[$i]->option) > 0) {
				$currentRow = $currentRow - 1;
				for ($j=0; $j < sizeof($this->invoice->spec->participant[$i]->option); $j++) {
					if ($this->invoice->spec->participant[$i]->option[$j]->option_text == 'Ej vald') {
						// Skip
					}
					else {
						$currentRow = $currentRow + 4;
						$this->pdf->SetXY(20, $currentRow);
						$this->pdf->Write(12, utf8_decode($this->invoice->spec->participant[$i]->option[$j]->option_text));
					}
				}
			}
		}	
	}

	private function _headerWrite() {
		$this->pdf->SetFontSize(16);
		$this->pdf->SetXY(18, 4);
		$this->pdf->Write(16, utf8_decode($this->invoice->company_name));
		$this->pdf->SetFont($this->setting->font,'I');
		$this->pdf->SetFontSize(9);
		$this->pdf->SetXY(18, 11);
		$this->pdf->Write(14, 'i samarbete med Turtle Pay');
		$this->pdf->SetXY(18, 15);
		$this->pdf->Write(14, utf8_decode('P.O. Box 24078, SE-104 50 Stockholm'));
		$this->pdf->SetFont($this->setting->font);
		
		$this->pdf->SetFontSize(14);
		$this->pdf->SetXY(116, 0);
		$this->pdf->Write(16, 'FAKTURA');
		$this->pdf->SetFont($this->setting->font,'B');
		
		$this->pdf->SetFontSize(9);
		$this->pdf->SetXY(116, 8);
		$this->pdf->Write(11, 'Utskriftsdatum');
		$this->pdf->SetFont('');
		$this->pdf->SetFont($this->setting->font);
		$this->pdf->SetFontSize(10);
		$this->pdf->SetXY(116, 13);
		$this->pdf->Write(10, $this->invoice->date);

		$this->pdf->SetFont($this->setting->font,'B');
		$this->pdf->SetFontSize(9);
		$this->pdf->SetXY(174, 8);
		$this->pdf->Write(11, 'Sidnr');
		$this->pdf->SetFont('');
		$this->pdf->SetFont($this->setting->font);
		$this->pdf->SetFontSize(10);
		$this->pdf->SetXY(174, 13);
		$this->pdf->Write(10, $this->pageNo . '(' . $this->totalPages . ')');

		$this->pdf->SetFont($this->setting->font,'B');
		$this->pdf->SetFontSize(9);
		$this->pdf->SetXY(116, 17);
		$this->pdf->Write(11, utf8_decode('Förfallodatum'));
		$this->pdf->SetFont('');
		$this->pdf->SetFont($this->setting->font);
		$this->pdf->SetFontSize(10);
		$this->pdf->SetXY(116, 22);
		$this->pdf->Write(10, $this->invoice->duedate);

		if($this->invoice->people_company_on == 'y') {	
			$this->pdf->SetFontSize(10);
			$this->pdf->SetXY(116, 33);
			$this->pdf->Write(10, utf8_decode($this->invoice->name));
			$this->pdf->SetXY(116, 38);
			$this->pdf->Write(10, utf8_decode($this->invoice->spec->people_company));
			$this->pdf->SetXY(116, 43);
			$this->pdf->Write(10, utf8_decode($this->invoice->spec->people_company_address));
			$this->pdf->SetXY(116, 48);
			$this->pdf->Write(10, utf8_decode($this->invoice->spec->people_company_postcode . ' ' . $this->invoice->spec->people_company_city));
		}
		else {
			$this->pdf->SetFontSize(10);
			$this->pdf->SetXY(116, 33);
			$this->pdf->Write(10, utf8_decode($this->invoice->name));
			$this->pdf->SetXY(116, 38);
			$this->pdf->Write(10, utf8_decode($this->invoice->address));
			$this->pdf->SetXY(116, 43);
			$this->pdf->Write(10, utf8_decode($this->invoice->postaddress));
			//$this->pdf->SetXY(116, 48);
			//$this->pdf->Write(10, utf8_decode('Aktiebolaget Allehanda'));
		}
	}

	private function _specHeader() {
		$this->pdf->SetFont($this->setting->font,'B');
		$this->pdf->SetFontSize(11);
		$this->pdf->SetXY(18, 60); // 68
		$this->pdf->SetFillColor(220,220,220);
		$this->pdf->Cell(184,9,'   Specifikation','BTLR',0,'L',true);
	
		$this->pdf->SetFont('');
		$this->pdf->SetFont($this->setting->font);
		$this->pdf->SetFontSize(10);
		$this->pdf->SetXY(20, 68);
		$this->pdf->Write(10, utf8_decode('Transaktionsdatum'));  // Inköpsdatum
		
		$this->pdf->SetXY(20, 88);
		$this->pdf->Write(10, utf8_decode('Kvittoreferens'));
		$this->pdf->SetXY(50, 88);
		$this->pdf->Write(10, utf8_decode($this->invoice->receipt_number));
		
		if ($this->invoice->spec->has_vat == 'y') {
			$this->pdf->SetFontSize(8);
			$this->pdf->SetXY(20, 92);
			$this->pdf->Write(10, utf8_decode('(varav moms (' . $this->invoice->spec->vat . '%), ' . $this->invoice->spec->vat_amount . ' kr, momsreg.nr. SE' . $this->invoice->spec->company_id_number . '01)'));
			$this->pdf->SetFont('');
			$this->pdf->SetFont($this->setting->font);
			$this->pdf->SetFontSize(10);
		}

		if ($this->invoice->spec_type == '1') {
			$this->pdf->SetXY(20, 101);
			$this->pdf->Write(10, utf8_decode($this->invoice->spec));
		}

		$this->pdf->SetXY(20, 73);
		$this->pdf->Write(10, $this->invoice->purchase_date);
		$this->pdf->SetXY(50, 73);
		$this->pdf->Write(10, utf8_decode($this->invoice->company_name));
		
		$this->pdf->SetFontSize(8);
		$this->pdf->SetXY(50, 77);
		$this->pdf->Write(10, utf8_decode('(Org.nr. ' . $this->invoice->spec->company_id_number . ')'));
		$this->pdf->SetFont('');
		$this->pdf->SetFont($this->setting->font);
		$this->pdf->SetFontSize(10);
		
		$this->refundAll = false;
		if ($this->invoice->returnInvoice == "y") {
			$this->invoice->credit_amount = $this->invoice->prev_amount;
			$this->pdf->SetXY(114, 73);
			$this->pdf->Write(10, utf8_decode('Returbelopp'));
			$this->pdf->SetXY(154, 73);
			$this->pdf->Write(10, utf8_decode('-' . $this->invoice->refund_amount)); //  + ' kr';
			if ($this->invoice->refund_all == 'y') {
				$this->refundAll = true;
				$this->pdf->SetXY(114, 78); // 91
				$this->pdf->Write(10, utf8_decode('Totalt (kr)'));
				$this->pdf->SetXY(154, 78); // 91
				$this->pdf->Write(10, utf8_decode($this->invoice->total)); //  + ' kr';

				$this->pdf->SetXY(114, 83); // 101
				$this->pdf->Write(10, utf8_decode('OCR-nummer'));
				$this->pdf->SetXY(154, 83); // 101
				$this->pdf->Write(10, utf8_decode($this->invoice->ocrno));
			}
		}

		$this->pdf->SetXY(114, 68); // 81
		$this->pdf->Write(10, utf8_decode('Köpesumma'));
		$this->pdf->SetXY(154, 68); // 81
		$this->pdf->Write(10, utf8_decode($this->invoice->credit_amount)); //  + ' kr';

		$this->pdf->SetXY(50, 81); // 86
		$this->pdf->Write(10, utf8_decode($this->invoice->shop_name));

		if ($this->refundAll == false) {
			if ($this->invoice->start_fee > 0) {
				$this->pdf->SetXY(114, 74 + $this->extra); //86
				$this->pdf->Write(10, utf8_decode('Uppläggningsavgift'));
				$this->pdf->SetXY(154, 74 + $this->extra); // 86
				$this->pdf->Write(10, utf8_decode($this->invoice->start_fee)); // + ' kr';
				$this->extra = $this->extra + 5;
			}
			$this->pdf->SetXY(114, 73 + $this->extra); // 86
			$this->pdf->Write(10, utf8_decode('Aviavgift'));
			$this->pdf->SetXY(154, 73 + $this->extra); // 86
			$this->pdf->Write(10, utf8_decode($this->invoice->fee)); // + ' kr';
		}

		if ($this->refundAll == false) {
			$this->pdf->SetFont($this->setting->font,'B');
			$this->pdf->SetXY(114, 78 + $this->extra); // 91
			$this->pdf->Write(10, utf8_decode('Totalt (kr)'));
			$this->pdf->SetXY(154, 78 + $this->extra); // 91
			$this->pdf->Write(10, utf8_decode($this->invoice->total)); //  + ' kr';
			$this->pdf->SetFont('');
			$this->pdf->SetFont($this->setting->font);
			$this->pdf->SetFontSize(10);

			$this->pdf->SetXY(114, 83 + $this->extra); // 96
			$this->pdf->Write(10, utf8_decode('Bankgiro'));
			$this->pdf->SetXY(154, 83 + $this->extra); // 96
			$this->pdf->Write(10, '5258-0016');

			$this->pdf->SetXY(114, 88 + $this->extra); // 101
			$this->pdf->Write(10, utf8_decode('OCR-nummer'));
			$this->pdf->SetXY(154, 88 + $this->extra); // 101
			$this->pdf->Write(10, utf8_decode($this->invoice->ocrno));

			$this->pdf->SetXY(114, 93 + $this->extra); // 106
			$this->pdf->Write(10, utf8_decode('Betalning oss tillhanda'));
			$this->pdf->SetXY(154, 93 + $this->extra); // 106
			$this->pdf->Write(10, utf8_decode($this->invoice->duedate));

		}
		$this->startRowPageOn =  93 + $this->extra;
	}

	private function _installmentWrite() {
		if ($this->invoice->returnInvoice == "y" || $this->invoice->start_fee > 0) {
			$this->extra += 30;
		}
		else {
			$this->extra += 35;
		}
		// echo  126 + $this->extra; die('');
		$totalValue = str_replace(',' , '', $this->invoice->total);
		if ((float)$totalValue > $this->invoice->installmentLimit) {
			$this->pdf->SetFont($this->setting->font,'B');
			$this->pdf->SetFontSize(11);
			$this->pdf->SetXY(20, 161); //126 + $this->extra); // 121
			$this->pdf->Write(10, utf8_decode("Ta't lugnt!  Betala i din egen takt"));
			$this->pdf->SetFont('');
			$this->pdf->SetFont($this->setting->font);
			$this->pdf->SetFontSize(10);

			$this->pdf->SetXY(20, 166); //  131 + $this->extra); // 126
			$this->pdf->Write(10, utf8_decode('Du kan istället betala valfritt belopp under ' .  $this->invoice->monthly_no . ' månader, dock lägst '));

			$this->pdf->SetXY(124, 166); // 131 + $this->extra); // 126
			$this->pdf->SetFont($this->setting->font,'B');
			$this->pdf->Write(10, utf8_decode( $this->invoice->monthly_payment_total . ' kronor'));
			$this->pdf->SetFont('');
			$this->pdf->SetFont($this->setting->font);
			$this->pdf->SetFontSize(10);

			$len = strlen($this->invoice->monthly_payment_total);
			if ($len <= 2) {
				// under 100
				$posPlus = 0;
			}
			else if ($len == 3) {
				// over 99 and under 1000
				$posPlus = 2;
			}
			else if ($len >= 4) {
				// over 1000
				$posPlus = 5;
			}

			$this->pdf->SetXY(140 + $posPlus, 166); // 131 + $this->extra); // 126
			$this->pdf->Write(10, utf8_decode(' senast ' . $this->invoice->duedate . '.'));

			$interestText = "Räntefritt " . $this->invoice->grace_days . " dagar, ränta " . $this->invoice->interest . "%, aviavg. 29 kr";
			if ($this->invoice->admin_fee > 0) {
				$interestText .= ', adm.avg. ' . $this->invoice->admin_fee . ' kr/mån';
			}
			$interestText .= ".";
			$effectiveText = "(Effektivränta på 10,000kr " . $this->invoice->effective_rate . "%, totalkost. 12mån " . number_format($this->invoice->effective_total) . "kr)"; // effective_rate
			$this->pdf->SetXY(20, 171); // 136 + $this->extra);
			$this->pdf->Write(10, utf8_decode($interestText));
			$this->pdf->SetFont($this->setting->font);
			$this->pdf->SetFontSize(8);
			$this->pdf->SetXY(96, 171); // 136 + $this->extra);
			$this->pdf->Write(10, utf8_decode($effectiveText));
			$this->pdf->SetFont($this->setting->font);
			$this->pdf->SetFontSize(10);
		}

		$this->pdf->SetXY(20, 176); // 141 + $this->extra); // 136
		$this->pdf->Write(10, utf8_decode('Ange fakturans OCR-nummer vid inbetalningen. Se villkor på följande länk: www.turtle-pay.com/villkor.'));

		$this->pdf->SetXY(20, 181); // 146 + $this->extra);
		$this->pdf->Write(10, utf8_decode('Förseningsavgift och dröjsmålsränta kan tillkomma vid sen betalning.'));
	}

	private function _footerWrite() {
		$this->pdf->Line(18,190,201,190);
		$this->pdf->SetFontSize(8);
		$this->pdf->SetXY(18, 188);
		$this->pdf->Write(10, utf8_decode('Turtle Pay AB'));
		$this->pdf->SetXY(42, 188);
		$this->pdf->Write(10, utf8_decode('Org nr: 559101-6786'));
		$this->pdf->SetXY(74, 188);
		$this->pdf->Write(10, utf8_decode('P.O. Box 24078'));
		$this->pdf->SetXY(100, 188);
		$this->pdf->Write(10, utf8_decode('SE-104 50 Stockholm'));
		$this->pdf->SetXY(140, 188);
		$this->pdf->Write(10, utf8_decode('Telefon 08-80 62 20'));
		$this->pdf->SetXY(172, 188);
		$this->pdf->Write(10, utf8_decode('info@turtle-pay.com'));
	}

	private function _bankgiroCard() {
		if ($this->refundAll == false) {
			$this->pdf->SetFontSize(8);
			$this->pdf->SetXY(20, 230);
			$this->pdf->Write(10, utf8_decode($this->invoice->name));
			$this->pdf->SetXY(20, 234);
			$this->pdf->Write(10, utf8_decode($this->invoice->address));
			$this->pdf->SetXY(20, 238);
			$this->pdf->Write(10, utf8_decode($this->invoice->postaddress));
			$this->pdf->SetFontSize(12);
			$this->pdf->SetXY(90, 238);
			$this->pdf->Write(12, utf8_decode('Fyll i valfritt belopp'));
			$this->pdf->SetFont('OCR-B','',12);
			$this->pdf->SetXY(12, 272);
			$this->pdf->Write(10, utf8_decode('#'));
			$this->pdf->SetXY(49, 272);
			$this->pdf->Write(10, utf8_decode($this->invoice->ocrno . ' #'));
			$this->pdf->SetXY(167, 272);
			$this->pdf->Write(10, utf8_decode('52580016#42#'));
		}
	}

	private function _continuePageAdd() {
		$this->pageNo = $this->pageNo + 1;
		$this->pdf->setSourceFile($this->setting->mallContinuePage);
		$templateId = $this->pdf->importPage(1);
		$size = $this->pdf->getTemplateSize($templateId);
		$this->pdf->AddPage('P', array($size['width'], 310));
		$this->pdf->useTemplate($templateId);
		$this->pdf->SetFont($this->setting->font);
		$this->extra = 0;
	}

	private function _specHeaderContine() {
		$this->pdf->SetFont($this->setting->font,'B');
		$this->pdf->SetFontSize(11);
		$this->pdf->SetXY(18, 60); // 68
		$this->pdf->SetFillColor(220,220,220);
		$this->pdf->Cell(184,9,'   Specifikation','BTLR',0,'L',true);
		$this->pdf->SetFont('');
		$this->pdf->SetXY(20, 68);
		$this->pdf->Write(10, utf8_decode('Kvittoreferens'));
		$this->pdf->SetXY(50, 68);
		$this->pdf->Write(10, utf8_decode($this->invoice->receipt_number));
	}

}

?>
