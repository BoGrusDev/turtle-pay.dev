<?php
/*
    Class SettlementCompanyClass

	Date: 2019-08-06 / 202003

	LAETST THAT BOOK ALL

	*/
	
ini_set('display_errors', 1);
ini_set('display_startup_errors', 1);
error_reporting(E_ALL);
	

class SettlementCompanyClass extends ActionBase {

	/*
	public function __construct() {
		$this->_Settings();
	}
	*/

	public function Run($data) {
		$actionMethod = 'action' . $data->_action;
		return $this->$actionMethod($data);
	}

	private function actionCompanyInterestBulk($data) {
	/*
		{
			"_group" : "SettlementCompany",
			"_action" : "CompanyInterestBulk",
			"_from_date" : "2020-01-29",
			"_to_date" : "2020-02-28",
			"booking_date" : "2020-03-04"
		}
	*/
		$toDate  = substr($data->_period, 0, 4) . '-' . substr($data->_period, 4, 2) . '-28';
		$prevPeriod = $data->_period - 1;
		$fromDate = substr($prevPeriod, 0, 4) . '-' . substr($prevPeriod, 4, 2) . '-29';
			
		$bookingDate = date("Y-m-d", strtotime("+" . $toDate . " + 5 days"));

		$sql = "SELECT company_id FROM company ORDER BY company_id";
		$companyList = $this->_GetList($sql);
		$counter = 0;
		for ($i=0; $i < sizeof($companyList); $i++) {
			$param = new stdClass();
			$param->_company_id = $companyList[$i]['company_id'];
			$param->_from_date = $fromDate;
			$param->_to_date = $toDate;
			$param->booking_date = $bookingDate;
			// if ($param->_company_id == '13') {
				if ($this->companyInterest($param)) {
					$counter++;
				} 
			// }
		}

		$reply = new StdClass();
		$reply->code = '1';
		$reply->counts = $counter;
		return json_encode($reply);
	}

	private function companyInterest($data) {

		/*
			{
				"_group" : "SettlementCompany",
				"_action" : "CompanyInterest",
				"_company_id" : "13",
				"_from_date" : "2019-07-29",
				"_to_date" : "2019-08-28",
				"booking_date" : "2019-09-03"
			}

			
		*/

		$this->_Settings($data->_company_id);
		$interestRate = $this->Setting->base_interest + $this->Setting->company_interest_margin;

		$begin = new DateTime($data->_from_date);
		//$begin->modify('+1 day'); //
		$end = new DateTime($data->_to_date);
		$end->modify('+1 day'); // need for the loop

		$daterange = new DatePeriod($begin, new DateInterval('P1D'), $end);

		$oInterest = array();
		$iInterest = -1;
		$totalInterest = 0;
		foreach($daterange as $date) {
			$dateBalance = $date->format("Y-m-d");
			$dayBalance = $this->getVendorsBalance($data->_company_id, $dateBalance);

			if ($dayBalance > 0) {
				$oInterest[] = new StdClass();
				$iInterest++;
				$oInterest[$iInterest]->date = $dateBalance;
				$oInterest[$iInterest]->balance = $dayBalance;
				$oInterest[$iInterest]->interest = $dayBalance * $interestRate / 100 / 360;
				$totalInterest += $oInterest[$iInterest]->interest;
				//echo "$dateBalance;$dayBalance;" . $oInterest[$iInterest]->interest . "\n";

			}

		}
		//echo $totalInterest;
		$amount = round($totalInterest);
		if ($amount > 0) {

			//$amount = round($totalInterest);
			$trans = array();

			$trans[] = new stdClass();
			$trans[0]->trans_type = 'interest';
			$trans[0]->account_no = '8300';
			$trans[0]->amount = -$amount;
			$trans[0]->company_id = $data->_company_id;

			$trans[] = new stdClass();
			$trans[1]->trans_type = 'interest';
			$trans[1]->account_no = '2981';
			$trans[1]->amount = $amount;
			$trans[1]->company_id = $data->_company_id;

			$booking = new StdClass();
			$booking->booking_date = $data->booking_date;
			$booking->booking_text = "Company settlemt";
			$booking->booking_type = "c-settl";
			$booking->company_id = $data->_company_id;
			$booking->prel = "n";
			$booking->_trans = $trans;

			if ($this->checkIfBooked($data->_company_id, $data->booking_date) == false) {
				$this->_BookNew($booking);
				return true;
			}
			else {
				return false;
			}
		}
		else {
			return false;
		}
	}

	private function checkIfBooked($companyId, $bookingDate) {
		$sql = "SELECT count(*) AS counts FROM booking WHERE booking_type = 'c-settl' AND booking_date = '$bookingDate' AND company_id=$companyId AND prel='n'";
		$res = $this->_Get($sql);
	
		if ($res['counts'] > 0) {
			return true;
		}
		else {
			return false;
		}
	}

	private function getVendorsBalance($companyId, $date) {

		$sql = "SELECT SUM(t.amount) AS sum ";
		$sql .= "FROM booking b, btrans t ";
		$sql .= "WHERE b.booking_id = t.booking_id AND t.account_no = '2981' AND b.booking_date <= '$date' AND t.prel='n' AND ";
		$sql .= "t.company_id = '" . $companyId . "'";

		$result = $this->_Get($sql);
		if ($result['sum'] == null) {
			$result['sum'] = "0";
		}
		return $result['sum'];
	}

		
}
