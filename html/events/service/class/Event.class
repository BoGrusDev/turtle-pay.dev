<?php
/*
   InvoiceEventClass

	Date: 2019-08-02

*/

class EventClass extends ActionPublic {

	public function Run($data) {
		$peopleId = $this->_CheckToken($data->_token);
		if ($peopleId) {
			$data->_people_id = $peopleId;
			$actionMethod = 'action' . $data->_action;
			echo $this->$actionMethod($data);
		} else {
			$reply = new stdClass();
			$reply->code = "9";
			return json_encode($reply);
		}
	}
	
	private function actionEventStatusSet($data) {
		$data->_company_id = $data->_user_id;
		$result = $this->_RestApiCall(json_encode($data));
		return $result;
	}

	public function actionEventList($data) {
		// -- 
		// Get all Events for a Company
		//
		$param = new stdClass();
		$param->_group = "Event";
		$param->_action = "EventList";
		$param->_company_id = $data->_user_id;
		$param->_people_id = $data->_people_id;
		$result = $this->_RestApiCall(json_encode($param));

		return $result;
	}

	public function actionEventItemPanelReportList($data) {
		// --
		// -- Get all Reports for a Event
		//
		$param = new stdClass();
		$param->_group = "Event";
		$param->_action = "EventItemPanelReportList";
		$param->_company_id = $data->_user_id;
		$param->_people_id = $data->_people_id;
		$param->_event_id = $data->_event_id;
		$result = $this->_RestApiCall(json_encode($param));

		return $result;
	}

	private function actionEventItemPanelReportLoad($data) {
		// --
		// -- Load a Report
		//
		$data->_company_id = $data->_user_id;
		$result = $this->_RestApiCall(json_encode($data));
		return $result;
	}

	private function actionEventItemList2($data) {
		// --
		// -- Create the report
		//
		$data->_company_id = $data->_user_id;
		$result = $this->_RestApiCall(json_encode($data));
		return $result;
	}
	


	/*
	public function actionEventItemLoad($data) {

		$param = new stdClass();
		$param->_group = "Event";
		$param->_action = "EventItemLoad";
		$param->_company_id = $data->_user_id;
		$param->_people_id = $data->_people_id;
		$param->_event_id = $data->_event_id;
		$param->_webform_id = $data->_webform_id;
		$result = $this->_RestApiCall(json_encode($param));

		return $result;
	}

	public function actionEventItemList($data) {

		$param = new stdClass();
		$param->_group = "Event";
		$param->_action = "EventItemList";
		$param->_company_id = $data->_user_id;
		$param->_people_id = $data->_people_id;
		$param->_event_id = $data->_event_id;
		$param->_options = $data->_options;
		$result = $this->_RestApiCall(json_encode($param));

		return $result;
	}

	private function actionEventCreate($data) {
        $data->_company_id = $data->_user_id;
		$data->_people_id = $data->_people_id;
		$result = $this->_RestApiCall(json_encode($data));
		return $result;
	}

	private function actionEventTemplateList($data) {
		$param = new stdClass();
		$param->_group = "Event";
		$param->_action = "EventTemplateList";
		$param->_company_id = $data->_user_id;
		$param->_people_id = $data->_people_id;
		$result = $this->_RestApiCall(json_encode($param));

		return $result;
	}

	public function actionEventGet($data) {

		$param = new stdClass();
		$param->_group = "Event";
		$param->_action = "EventGet";
		$param->_company_id = $data->_user_id;
		$param->_event_id = $data->_event_id;
		$param->_people_id = $data->_people_id;
		$result = $this->_RestApiCall(json_encode($param));

		return $result;
	}
	
	public function actionEventCollection($data) {
		// --
		// Used by Event inställningar

		$param = new stdClass();
		$param->_group = "Event";
		$param->_action = "EventCollection";
		$param->_company_id = $data->_user_id;
		$param->_event_id = $data->_event_id;
		$param->_people_id = $data->_people_id;
		$result = $this->_RestApiCall(json_encode($param));

		return $result;
	}

	public function actionEventCollectionSelection($data) {
		// --
		// Used by Event inställningar
		$param = new stdClass();
		$param->_group = "Event";
		$param->_action = "EventCollectionSelection";
		$param->_company_id = $data->_user_id;
		$param->_event_id = $data->_event_id;
		$param->_people_id = $data->_people_id;
		$result = $this->_RestApiCall(json_encode($param));

		return $result;
	}

	private function actionEventCollectionUpdate($data) {
		$data->_company_id = $data->_user_id;
		$result = $this->_RestApiCall(json_encode($data));
		return $result;
	}

	private function actionEventCollectionSelectionUpdate($data) {
		$data->_company_id = $data->_user_id;
		$result = $this->_RestApiCall(json_encode($data));
		return $result;
	}
	
	private function actionEventCollectionSelectionRemove($data) {
		$data->_company_id = $data->_user_id;
		$result = $this->_RestApiCall(json_encode($data));
		return $result;
	}
	
	private function actionWebformUpdate($data) {

		$data->_group = "Event";
		$data->_action = "WebformUpdate";
		$data->_company_id = $data->_user_id;

		$result = $this->_RestApiCall(json_encode($data));
		return $result;
	}

	private function actionGetLogoList($data) {
		//$folder = '/Users/bogrusell/WebSites/turtle-pay.dev/logo/';
		$folder = '/var/www/html/dev/logo/';
		$list = scandir($folder);
		$companyPrefix = $data->_user_id . '-';
		$prefixPos = strpos($companyPrefix, '-') + 1;
		$reply = new stdClass();
		$reply->code = '1';
		$reply->dir = array();
		for ($i=0; $i < sizeof($list); $i++) {
			if ($list[$i] == '.' || $list[$i] == '..' || $list[$i] == '.DS_Store') {
				// skip
			}
			else {
				// NEW PART
				$dir = $list[$i];
				if (substr($dir, 0, $prefixPos) == $companyPrefix) {
					$position = strpos($dir, '-') + 1;
					$dir = substr($dir ,$position);
					array_push($reply->dir, $dir);
				}
			}
		}
		return json_encode($reply);
	}
*/
}
