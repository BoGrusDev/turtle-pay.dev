<?php
/**
 * Database Service
 *
 * Extend version for TurtlePay
 *  - Add settings as a parameter in the construcur
 *
 * Last updated: 2018-10-07
 *
 * @author Bo Grus
 *
 * Error codes:
 * http://docstore.mik.ua/orelly/java-ent/jenut/ch08_06.htm
 *
 */

class ActionBase {

	protected $db;
	public $Setting;

	public function __construct($DB_HOST, $DB_NAME, $DB_USER, $DB_PASS, $text) {

		$this->db = new PDO('mysql:host=' . $DB_HOST . ';dbname=' . $DB_NAME . ';charset=utf8', $DB_USER , $DB_PASS);
		$this->Text = $text;
	}

	function _Close() {
		$stmt = $this->db = null;
	}

	function _GetList($sql) {
		$stmt = $this->db->prepare($sql);
		$stmt->execute();
		if ($stmt->errorCode() == 0) {
			return $stmt->fetchAll(PDO::FETCH_ASSOC);
		} else {
			//return -1;
			$errors = $stmt->errorInfo();
			return $errors[0] . ":" . $errors[1] . ":" . $errors[2];
		}
	}

	function _Get($sql) {
		$stmt = $this->db->prepare($sql);
		$stmt->execute();
		if ($stmt->errorCode() == 0) {
			if($stmt->rowCount() > 0) {
				$result =  $stmt->fetch(PDO::FETCH_ASSOC);
				$result['code'] = "1";
				return $result;
			} else {
				$result =  array();
				$result['code'] = "0";
				return $result;
			}
		} else {
			$code = $stmt->errorCode() * -1;
			$result =  array();
			//$result['code'] = $code;
			$result['code'] = "0";
			return $result;
		}
	}

	function _Insert($table, $data) {

		$sql = 'INSERT INTO ' . $table . '(';
		$values = "";
		foreach($data as $key => $value) {
			if (substr($key, 0, 1) != '_') {
				$sql .= $key . ',';
				$values .= '"' . $value . '",';
			}
		}
		$sql = rtrim($sql, ",");
		$values = rtrim($values, ",");
		$sql .= ') VALUES (' . $values . ')';
		$stmt = $this->db->prepare($sql);

		//if ($table == "first_invoice") {
			 //echo $sql;
		 //}

		$stmt->execute();
		if ($stmt->errorCode() == '00000') {
			$result =  array();
			$result['code'] = "1";
			$result['id'] = $this->db->lastInsertId();
			return $result;
		} else {

			$code = $stmt->errorCode();
			if ($code == "23000") {
				$result =  array();
				$result['code'] = "0";
				$result['denied_code'] = "duplicated";
				return $result;
			} else {
				$result =  array();
				$result['code'] = "0";
				$result['denied_code'] = "error_when_insert";
				//return $result;
				echo $sql;
				print_r($stmt->errorInfo());
				$code = $stmt->errorCode() * -1;
				return $code;
			}
		}
	}

	function _InsertSql($sql) {
		$stmt = $this->db->prepare($sql);
		$stmt->execute();
		if ($stmt->errorCode() == '0000') {
			$result =  array();
			$result['code'] = "1";
			$result['id'] = $this->db->lastInsertId();
			return $result;
		} else {

			$code = $stmt->errorCode();
			if ($code == "23000") {
				$result =  array();
				$result['code'] = "0";
				$result['denied_code'] = "duplicated";
				return $result;
			} else {
				$result =  array();
				$result['code'] = "0";
				$result['denied_code'] = "error_when_insert";
				//return $result;
				echo $sql;
				print_r($stmt->errorInfo());
				//$code = $stmt->errorCode() * -1;
				return $code;
			}
		}
	}

	function _Update($table, $primary_key, $id, $data) {

		$prepare = "UPDATE $table SET ";
		$paramArray = array();
		foreach($data as $key => $value) {
			if (substr($key, 0, 1) != '_') {
				$prepare .= $key . "='" . $value . "',";
			}
		}
		$prepare = rtrim($prepare, ",");

		$prepare .= " WHERE $primary_key = '" . $id . "'";
		$stmt = $this->db->prepare($prepare);
		$stmt->execute();
		if ($stmt->errorCode() == 0) {
			$result =  array();
			$result['code'] = "1";
			return $result;
		} else {
			$result =  array();
			$result['code'] = "0";
			//$result['error'] = $stmt->errorCode();
			return $result;
			//$code = $stmt->errorCode() * -1;
			//print_r($stmt);
			//return $code;
		}
	}

	function _Delete($table, $primary_key, $id) {
		$prepare = "DELETE FROM $table WHERE $primary_key = $id";

		$stmt = $this->db->prepare($prepare);
		$stmt->execute();
		if ($stmt->errorCode() == 0) {
			return $this->db->lastInsertId();
		} else {
			$code = $stmt->errorCode();
			if ($code == "23000") {
				// Integrity constraint violation (Dublicated key)
				return "-23";
			} else {
				echo $prepare;
				$code = $stmt->errorCode() * -1;
				return $code;
			}
		}
	}

	function _Query($sql) {
		$stmt = $this->db->prepare($sql);
		$stmt->execute();
		$result =  array();
		if ($stmt->errorCode() == 0) {
			$result['code'] = "1";
			return $result;
		} else {
			$result['code'] = "0";
			return $result;
		}
	}

	function _BeginTrans() {
		$this->db->beginTransaction();
	}

	function _Rollback() {
		$this->db->rollback();
	}

	function _Commit() {
		$this->db->commit();
	}

	function _Lock($table) {
		$stmt = $this->db->exec("LOCK TABLES $table WRITE");
	}

	function _Unlock($table) {
		$stmt = $this->db->exec("UNLOCK TABLES");
	}

	function _CreateGUID(){
		// Return 2F8672B9-1BB8-2FFA-C56D-C5F8E8946FEF
		if (function_exists('com_create_guid')){
			return com_create_guid();
		}	else{
			mt_srand((double)microtime()*10000);//optional for php 4.2.0 and up.
			$charid = strtoupper(md5(uniqid(rand(), true)));
			$hyphen = chr(45);// "-"
			//$uuid = chr(123)// "{"
			$uuid =
				substr($charid, 0, 8).$hyphen
				.substr($charid, 8, 4).$hyphen
				.substr($charid,12, 4).$hyphen
				.substr($charid,16, 4).$hyphen
				.substr($charid,20,12);
			return $uuid;
		}
	}

	/*
		Customize setting for Turtle pay
	*/

	function _Settings($company_id = null, $people_id = null) {

		// 2018-10-05
		//
		// Settings settting_typ
		// s = system base
		// c = _company
		// p = personalbonus

		// Load standard Settings
		$sql = "SELECT * FROM setting WHERE setting_type = 's' ORDER BY setting_id DESC LIMIT 1";
		$baseResult = $this->_Get($sql);

		if (isset($company_id)) {
			$sql = "SELECT * FROM setting WHERE setting_type = 'c' AND id = $company_id AND status_setting = 'a' ORDER BY setting_id DESC LIMIT 1";
			$companyResult = $this->_Get($sql);
			foreach ($companyResult as $key => $value) {
				if ($value != null) {
					$baseResult[$key] =  $value;
				}
			}
		}

		if (isset($people_id)) {
			$sql = "SELECT * FROM setting WHERE setting_type = 'p' AND id = $people_id AND status_setting = 'a' ORDER BY setting_id DESC LIMIT 1";
			$peopleResult = $this->_Get($sql);
			if (sizeof($peopleResult) > 0) {
				foreach ($peopleResult as $key => $value) {
					if ($value != null) {
						$baseResult[$key] =  $value;
					}
				}
			}
		}

		$this->Setting = (object) $baseResult;

		$this->Setting->customerInterest = (float) $this->Setting->base_interest + (float)$this->Setting->customer_interest_margin;
		//print_r($this->Setting);

	}

	// Deprecated
	/*
	function _MonthlyPayment($amount, $interestRate, $month) {

		$amortization = $amount / $month;
		//echo $amortization . ' - ';
		$interest = $amount * $interestRate / 100 /12;
		//echo $interest . ' - ';
		$monthlyPayment = $amortization + $interest;

		return number_format($monthlyPayment,0);
	}
	*/
	function _MonthlyPayment2($amount, $first_invoice_fee, $first_invoice_start_fee, $customerInterest, $repayment_term ,$monthly_invoice_fee, $administration_fee, $graceDays) {
		$totalAmount =  $amount + $first_invoice_fee +  $first_invoice_start_fee;
		//echo $totalAmount . " - ";
		$amortization = $totalAmount / $repayment_term;
		//echo $amortization . " - ";
		if ($graceDays > 180) {
			$interest = 0;
		}
		else {
			$interest = $totalAmount * $customerInterest / 100 /12;
		}

		$monthlyPayment = $amortization + $interest + $monthly_invoice_fee + $administration_fee;
		//echo $administration_fee . " : ";
		//echo number_format($monthlyPayment);
		//die('');
		return number_format($monthlyPayment,0);
	}

	function _Spar($personal_id_number) {

		$tidsstampel = date('Y-m-d') . 'T' . date('H:i:s') . ".000";
		$soapUrl = "https://ext-ws.statenspersonadressregister.se/spar-webservice/SPARPersonsokningService/20160213/";
		$xml_post_string  = "<?xml version='1.0' encoding='UTF-8'?>";
		$xml_post_string  .= '<Envelope xmlns="http://schemas.xmlsoap.org/soap/envelope/">xxx<Header />';
		$xml_post_string  .= '<Body>';
		$xml_post_string  .= '<SPARPersonsokningFraga xmlns="http://skatteverket.se/spar/instans/1.0">';
		$xml_post_string  .= '<IdentifieringsInformation xmlns="http://skatteverket.se/spar/komponent/1.0">';

		// Prod
		$xml_post_string  .= '<KundNrLeveransMottagare>513610</KundNrLeveransMottagare>';
		$xml_post_string  .= '<KundNrSlutkund>513610</KundNrSlutkund>';
		$xml_post_string  .= '<OrgNrSlutkund>5591016786</OrgNrSlutkund>';
		$xml_post_string  .= '<UppdragsId>27469</UppdragsId>';

		$xml_post_string  .= '<SlutAnvandarId>Turtle Pay Spar</SlutAnvandarId>';
		$xml_post_string  .= '<Tidsstampel>' . $tidsstampel . '</Tidsstampel>';
		$xml_post_string  .= '</IdentifieringsInformation>';
		$xml_post_string  .= '<PersonsokningFraga xmlns="http://skatteverket.se/spar/komponent/1.0">';
		$xml_post_string  .= '<PersonId>';
		$xml_post_string  .= '<FysiskPersonId>' . $personal_id_number . '</FysiskPersonId>';
		$xml_post_string  .= '</PersonId>';
		$xml_post_string  .= '</PersonsokningFraga>';
		$xml_post_string  .= '</SPARPersonsokningFraga>';
		$xml_post_string  .= '</Body>';
		$xml_post_string  .= '</Envelope>';

		$headers = array(
			"Content-type: text/xml;charset=\"utf-8\"",
			"Accept: text/xml",
			"Cache-Control: no-cache",
			"Pragma: no-cache",
			"Content-length: ".strlen($xml_post_string),
		);

		$ch = curl_init();
		curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 1);
		curl_setopt($ch, CURLOPT_URL, $soapUrl);
		curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
		curl_setopt($ch, CURLOPT_TIMEOUT, 10);
		curl_setopt($ch, CURLOPT_POST, true);
		curl_setopt($ch, CURLOPT_POSTFIELDS, $xml_post_string); // the SOAP request
		curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

		// Security settings

		// Prod
		curl_setopt($ch, CURLOPT_SSLCERT, 'spar-cert.pem');
		curl_setopt($ch, CURLOPT_SSLCERTPASSWD, 'Yap2018Rut');

		//curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);
		//curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);


		$response = curl_exec($ch);
		//$httpcode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
		//print curl_error($ch);
		curl_close($ch);

		$result = new StdClass();
		$result->people = new StdClass();

		$doc = new DOMDocument;
		$doc->loadXML($response);

		$status = $doc->getElementsByTagNameNS('http://skatteverket.se/spar/komponent/1.0', 'Kod')->item(0);
		if (isset($status)) {

			//echo $status->nodeValue . '<br>';
			$result->text = $doc->getElementsByTagNameNS('http://skatteverket.se/spar/komponent/1.0', 'Beskrivning')->item(0)->nodeValue;
			$result->status = "0";
			return $result;
		}

		if (!isset($doc->getElementsByTagNameNS('http://skatteverket.se/spar/komponent/1.0', 'Efternamn')->item(0)->nodeValue)) {
			$result->text = 'Sekretessmarkering'; // Person not exist
			$result->status = "0";
			return $result;
        }

		$protected  = $doc->getElementsByTagNameNS('http://skatteverket.se/spar/komponent/1.0', 'Sekretessmarkering')->item(0)->nodeValue;
		//
		// Handling ptotected
		//
		if ($protected == "J") {
			$result->text = 'Sekretessmarkering';
			$result->status = "0";
			return $result;
		}

		$result->people->personal_id_number  = $doc->getElementsByTagNameNS('http://skatteverket.se/spar/komponent/1.0', 'FysiskPersonId')->item(0)->nodeValue;
		$result->people->first_name = $doc->getElementsByTagNameNS('http://skatteverket.se/spar/komponent/1.0', 'Fornamn')->item(0)->nodeValue;
		$result->people->last_name = $doc->getElementsByTagNameNS('http://skatteverket.se/spar/komponent/1.0', 'Efternamn')->item(0)->nodeValue;
		$result->people->address = $doc->getElementsByTagNameNS('http://skatteverket.se/spar/komponent/1.0', 'Utdelningsadress2')->item(0)->nodeValue;
		$result->people->postcode = $doc->getElementsByTagNameNS('http://skatteverket.se/spar/komponent/1.0', 'PostNr')->item(0)->nodeValue;
		// CareOf
		$result->people->city = $doc->getElementsByTagNameNS('http://skatteverket.se/spar/komponent/1.0', 'Postort')->item(0)->nodeValue;

		/*
		if (isset($doc->getElementsByTagNameNS('http://skatteverket.se/spar/komponent/1.0', 'AvregistreringsorsakKod')->item(0)->nodeValue)) {
            //$result->people->avreg_code = $doc->getElementsByTagNameNS('http://skatteverket.se/spar/komponent/1.0', 'AvregistreringsorsakKod')->item(0)->nodeValue;
            //$result->people->avreg_date = $doc->getElementsByTagNameNS('http://skatteverket.se/spar/komponent/1.0', 'Avregistreringsdatum')->item(0)->nodeValue;
			$result->status = "0";
        } else {
			$result->status = "1";
		}
		*/
		$result->status = "1";
		return $result;
	}

	function _UcIdentity($personal_id_number) {
		/*
			(
	            [personal_id_number] => 8209209900
	            [name] => 'Saga' Inger-Britt Rönnberg
	            [address] => Mönstergatan 17
	            [postcode] => 54492
	            [city] => Hjo
	            [civil_state] => 7
	            [first_name] => Saga Inger-Britt
	            [last_name] => Rönnberg
	            [entrepreneur] => y
	        )
		*/

        $this->individ = new StdClass();

        $soapUrl = "https://www1.uc.se/UCSoapWeb/services/ucOrders2";
        $xml_post_string  = '<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ucor="http://www.uc.se/schemas/ucOrderRequest/">';
        $xml_post_string .= '<soapenv:Header/>';
        $xml_post_string .= '<soapenv:Body>';
        $xml_post_string .= '<ucor:identityCheck ucor:identifier="' . $personal_id_number .'" ucor:version="2.1" ucor:worksites="">';
        $xml_post_string .= '<ucor:customer>';
        $xml_post_string .= '<ucor:userId>' . $this->Setting->ucUser . '</ucor:userId>';
        $xml_post_string .= '<ucor:password>' . $this->Setting->ucPassword . '</ucor:password> ';
        $xml_post_string .= '</ucor:customer>';
        $xml_post_string .= '</ucor:identityCheck>';
        $xml_post_string .= '</soapenv:Body>';
        $xml_post_string .= '</soapenv:Envelope>';
        $headers = array(
            "Content-type: text/xml;charset=\"utf-8\"",
            "Accept: text/xml",
            "Cache-Control: no-cache",
            "Pragma: no-cache",
            "Content-length: ".strlen($xml_post_string),
        );

        $ch = curl_init();
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 1);
        curl_setopt($ch, CURLOPT_URL, $soapUrl);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_TIMEOUT, 10);
        curl_setopt($ch, CURLOPT_POST, true);
        curl_setopt($ch, CURLOPT_POSTFIELDS, $xml_post_string); // the SOAP request
        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
        $response = curl_exec($ch);
        curl_close($ch);
        $doc = new DOMDocument;
        $doc->loadXML($response);
        $groups = $doc->getElementsByTagNameNS('http://www.uc.se/schemas/ucOrderReply/', 'group');
        foreach ($groups as $group) {
            $groupid = $group->getAttribute('ns2:id');
            //echo  '<b>' . $group->getAttribute('ns2:id') . ";";
            //echo  $group->getAttribute('ns2:name') . "</b>";
            if ($groupid == 'W080') {
                $rows = $group->getElementsByTagNameNS('http://www.uc.se/schemas/ucOrderReply/', 'term');
                foreach ($rows as $row) {
                    $this->parseTag($row->getAttribute('ns2:id'), $row->nodeValue );
                }
            } else if ($groupid == 'W090') {
                $this->individ->entrepreneur = 'y';
            }
        }
        return $this->individ;
    }

    private function parseTag($tag, $value) {
        switch ($tag) {
            case 'W08002':
                $this->individ->personal_id_number = $value;
                break;
            //case 'W08003':
                //$this->individ->name = $value;
                //break;
            case 'W08083':
                $this->individ->first_name = $value;
                break;
            case 'W08084':
                $this->individ->last_name = $value;
                break;
            case 'W08004':
                $this->individ->address = $value;
                break;
            case 'W08005':
                $this->individ->postcode = $value;
                break;
            case 'W08006':
                $this->individ->city = $value;
                break;
            case 'W08020':
                $this->individ->blocking_code = $value;
                    /*
                    03 = Utvandrad/Obefintlighetsregistrerad
                    05 = Avliden
                    08 = UC-utredn. äkta
                    09 = UC-utredn. spec.
                    10 = Skyddad personuppgift
                    11= Förlorad id-handling
                */
                break;
                case 'W08030':
                    $this->individ->civil_state = $value;
                        /*
                        2 = Gift man
                        4 = Skild
                        5 = Änka/änkling
                        6 = Avliden
                        7 = Gift kvinna
                        8 = Barn under 18 år
                        9 = Okänt
                        P = Registrerat partnerskap
                        */
                    break;

                case 'W08006':
                    $this->individ->city = $value;
                    break;

                case 'W08025':
                    // Skyddad address
                    //$this->individ->city = $value;
                    break;
	            default :
        }
	}

	function _UcIndividual($personal_id_number) {

		$this->individual = new StdClass();
        $this->individual->people = new StdClass();

        $soapUrl = "https://www1.uc.se/UCSoapWeb/services/ucOrders2";
        $xml_post_string  = '<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ucor="http://www.uc.se/schemas/ucOrderRequest/">';
        $xml_post_string .= '<soapenv:Header/>';
        $xml_post_string .= '<soapenv:Body>';
        $xml_post_string .= '<ucor:individualReport ucor:product="r31" ucor:version="?">';
        $xml_post_string .= '<ucor:customer>';
        $xml_post_string .= '<ucor:userId>' . $this->Setting->ucUser . '</ucor:userId>';
        $xml_post_string .= '<ucor:password>' . $this->Setting->ucPassword . '</ucor:password> ';
        $xml_post_string .= '</ucor:customer>';
        $xml_post_string .= '<ucor:individualReportQuery ucor:xmlReply="1" ucor:htmlReply="0" ucor:reviewReply="0" ucor:pdfReply="0" ucor:extendedDetails="0" ucor:lang="swe">';
        $xml_post_string .= '<ucor:object>' . $personal_id_number . '</ucor:object>';
        $xml_post_string .= '</ucor:individualReportQuery>';
        $xml_post_string .= '</ucor:individualReport>';
        $xml_post_string .= '</soapenv:Body>';
        $xml_post_string .= '</soapenv:Envelope>';

        $headers = array(
            "Content-type: text/xml;charset=\"utf-8\"",
            "Accept: text/xml",
            "Cache-Control: no-cache",
            "Pragma: no-cache",
            "Content-length: ".strlen($xml_post_string),
        );

        $ch = curl_init();
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 1);
        curl_setopt($ch, CURLOPT_URL, $soapUrl);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_TIMEOUT, 10);
        curl_setopt($ch, CURLOPT_POST, true);
        curl_setopt($ch, CURLOPT_POSTFIELDS, $xml_post_string); // the SOAP request
        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
        $response = curl_exec($ch);
        curl_close($ch);
        $doc = new DOMDocument;
        $doc->loadXML($response);
        $groups = $doc->getElementsByTagNameNS('http://www.uc.se/schemas/ucOrderReply/', 'group');
        foreach ($groups as $group) {
            $groupid = $group->getAttribute('ns2:id');
            //echo  $group->getAttribute('ns2:id') . ";";
            //echo  $group->getAttribute('ns2:name') . "</b>";
            if ($groupid == 'W080') {
                $rows = $group->getElementsByTagNameNS('http://www.uc.se/schemas/ucOrderReply/', 'term');
                foreach ($rows as $row) {
                    $this->parseTagW080($row->getAttribute('ns2:id'), $row->nodeValue );
                }
            } else if ($groupid == 'W1A0') {
                $rows = $group->getElementsByTagNameNS('http://www.uc.se/schemas/ucOrderReply/', 'term');
                foreach ($rows as $row) {
                    $this->parseTagW1A0($row->getAttribute('ns2:id'), $row->nodeValue );
                    //echo $row->getAttribute('ns2:id') . '<br>';
                }
            }
        }
        return $this->individual;
    }

    private function parseTagW080($tag, $value) {
        switch ($tag) {
            case 'W08002':
                $this->individual->people->_personal_id_number = $value;
                break;
            case 'W08083':
                $this->individual->people->first_name = $value;
                break;
            case 'W08084':
                $this->individual->people->last_name = $value;
                break;
            case 'W08004':
                $this->individual->people->address = $value;
                break;
            case 'W08005':
                $this->individual->people->postcode = $value;
                break;
            case 'W08006':
                $this->individual->people->city = $value;
                break;
            case 'W08020':
                $this->individual->people->blocking_code = $value;
                    /*
                    03 = Utvandrad/Obefintlighetsregistrerad
                    05 = Avliden
                    08 = UC-utredn. äkta
                    09 = UC-utredn. spec.
                    10 = Skyddad personuppgift
                    11= Förlorad id-handling
                */
                break;
                case 'W08030':
                    $this->individual->people->civil_state = $value;
                        /*
                        2 = Gift man
                        4 = Skild
                        5 = Änka/änkling
                        6 = Avliden
                        7 = Gift kvinna
                        8 = Barn under 18 år
                        9 = Okänt
                        P = Registrerat partnerskap
                        */
                    break;

                case 'W08006':
                    $this->individual->people->city = $value;
                    break;

                case 'W08025':
                    // Skyddad address
                    //$this->individ->city = $value;
                    break;
            default :
        }
    }

    private function parseTagW1A0($tag, $value) {
        switch ($tag) {
            case 'W1A093':
            //if (substr( $value, 0, 1 ) === "%") {
                 //$value = substr($value, strpos($value, '%', 0) 1 + , );
                //$tag = substr($item, strpos($item, 'ns2:id=', 0) + 8, 4);
                //$tag = substr($item, strpos($item, 'ns2:id=', 0) + 8, 6);
                $value = rtrim($value, '%');
                $value = rtrim($value);
                $newValue = floatval(str_replace(',', '.', $value));

                $this->individual->people->uc_rating = $newValue;
                break;
        }
    }

	function _Book($data) {

		// Check balans zero
		$balance = 0;
		for ($i=0; $i<sizeof($data->_trans); $i++) {
			$balance =  $balance + $data->_trans[$i]->amount;
		}
		$balance = round($balance, 2);

		//print_r($data->booking);
		//$this->_BeginTrans();
		$reply = $this->_Insert('booking', $data );

		if ($reply['code'] =! "0") {
			$bookingId = $reply['id'];

			$sql = "INSERT INTO btrans (booking_id,account_no,amount, people_id, company_id, credit_id, trans_type) VALUES ";
			for ($i=0; $i<sizeof($data->_trans); $i++) {
				$sql .= '(' . $bookingId . ',' . $data->_trans[$i]->account_no;
				$sql .= ",'" . $data->_trans[$i]->amount . "'";

				$sql .= ",'" . $data->_trans[$i]->people_id . "'";
				$sql .= ",'" . $data->_trans[$i]->company_id . "'";
				$sql .= ",'" . $data->_trans[$i]->credit_id . "'";

				$sql .= ",'" . $data->_trans[$i]->trans_type . "'),";
			}
			if ($balance != 0) {
				$sql .= "(" . $bookingId . ",8193,'" . $balance . "')";
			}
			$sql = rtrim($sql,',');
			$replyTrans = $this->_InsertSql($sql);
			if ($replyTrans['code'] =! "0") {
			} else {
				// Error in trans
				//$this->_Rollback();
				$reply['code'] = "0";
			}
		} else {
			// Error with save Booking
			//$this->_Rollback();
			$reply['code'] = "0";
		}

		return $bookingId;
	}

	// new
	function _Reply($code, $denied_code) {
		$reply = new StdClass();
		$reply->code = $code;
		$reply->denied_code = $denied_code;
		return json_encode($reply);
	}

}
