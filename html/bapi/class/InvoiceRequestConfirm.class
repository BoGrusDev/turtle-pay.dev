<?php
/*
    Class InvoiceRequestConfirmClass

	Date: 2018-10-12

	Actions:
		- CheckApproveCode
		- Complete

	Private;

*/

class InvoiceRequestConfirmClass extends ActionBase {

	public function Run($data) {

		$actionMethod = 'action' . $data->_action;
		echo $this->$actionMethod($data);

	}

	private function actionCheckInvoice($data) {

		$reply = new StdClass();
		if (!isset($data->_approved_code)) {
			$reply->code = '0';
			$reply->code = 'no_approved_code';
		} else {
			$approved_code = $data->_approved_code;
			$sql = "SELECT invoice_request_id FROM invoice_request WHERE approved_code = '$approved_code' AND invoice_request_status = 'a'";
			$approvement = $this->_Get($sql);
			if ($approvement['code'] ==  '1') {
				$reply->code = '1';
			} else {
				$reply->code = '0';
				$reply->denied_code = 'no_valid_approved_code';
			}
		}

		return json_encode($reply);

	}

 	private function actionComplete($data) {

		/*
		{
			"_group" : "InvoiceRequestConfirm",
			"_action" : "Complete",

			"_bankid_personal_id_number" : "193303110682",
			"_bankid_text": "\rFAKTURA\r\rMMB Butiken AB (Hair Bar)\rMOOD Gallerian\rKöpesumma 3,000.00 kr\r\rRäntefritt 30 dagar\rAviavgift 29.00 kr\r\rKvittonummer _ReceiptNumber_\r \rMöjlig delbetalning\rLägsta månadsbelopp\r12 mån - ca 299, exklusive avgifter",
			"_approved_code": "0869E0AA-5728-ECE8-0A35-8E1C7E8F67D0",
			"receipt_number" : "A-1234-99",
			"cr_id" : "1",
			"signature": "PD94bWwgdmVyc2lvbj0i3dImXR1cmU+",
			"ocspResponse": "MIIHjwoBAKCCB4gwggVVtt9oUviBAHA=="
		}

		*/

		$reply = new StdClass();

		if (!isset($data->signature)) {
			$reply->code = '0';
			$reply->code = 'no_bankid_sign';
			return json_encode($reply);
			die('');
		}
		if (!isset($data->ocspResponse)) {
			$reply->code = '0';
			$reply->code = 'no_ocsp_response';
			return json_encode($reply);
			die('');
		}

		if (!isset($data->_approved_code)) {
			$reply->code = "0";
			$reply->denied_code = 'no_approved_code_attached';
			return json_encode($reply);
			die('');
		}

		$sql = "SELECT * FROM invoice_request WHERE approved_code = '$data->_approved_code' AND invoice_request_status = 'a'";
		$result = $this->_Get($sql);
		if ($result['code'] ==  '0') {
			$reply = new StdClass();
			$reply->code = "0";
			$reply->denied_code = 'no_valid_approved_code';
			return json_encode($reply);
			die('');
		}
		$approvement = (object) $result;

		$this->_Settings($approvement->company_id, $approvement->people_id);

		// Create the credit and insert in table "credit"
		$currentDate = date("Y-m-d"); //  H:i:s
		$date = new DateTime($currentDate);
		//$date->modify('+30 days');
		$dueDateString = '+' . $this->Setting->first_Invoice_due_days . ' days';
		$date->modify($dueDateString);
		$dueDate = $date->format('Y-m-d');

		$credit = array (
			'start_date' => $currentDate,
			'purchase_date' => $currentDate,
			'people_id' => $approvement->people_id,
			'personal_id_number' => $approvement->personal_id_number,
			'company_id' => $approvement->company_id,
			'store_id' => $approvement->store_id,
			'cr_id' => $data->cr_id,
			'sales_person_people_id' => $approvement->sales_person_people_id,
			'receipt_number' => $data->receipt_number,
			'source' => $approvement->source,
			'amount' => $approvement->amount,
			'fee' => $approvement->fee,
			'start_fee' => $approvement->start_fee,
			'admin_fee' => $approvement->admin_fee,
			'vendor_fee' => $this->Setting->vendor_fee,
			'sales_person_rebate' => $this->Setting->sales_person_rebate,
			'grace_days' => $this->Setting->credit_interest_grace_days,
			'interest_margin' => $this->Setting->customer_interest_margin,
			'approved_code' => $approvement->approved_code,
			'monthly_no' => $this->Setting->repayment_term, //'12' // Corrected $this->Setting->repayment_term
			'credit_status' => 'p',
			'signature' => $data->signature,
			'ocspResponse' => $data->ocspResponse
		);

		$replyCredit = $this->_Insert('credit', $credit);
		if ($replyCredit['code'] == "1")
			$creditId = $replyCredit['id'];
		else {
			$reply = new StdClass();
			$reply->code = "0";
			$reply->denied_code = 'cant_insert_credit';
			return json_encode($reply);
			die('');
		}

		$invoice_filename = $creditId . '-' . $this->_CreateGUID() . '.pdf';
		$ocrno = $this->ocrnoCreate($creditId);

		// Update credit and set the filenname for the first invoice
		$this->_Query("UPDATE credit SET first_invoice_ocrno='$ocrno' WHERE credit_id = $creditId");

		// Set person as customer
		//$this->_Query("UPDATE people SET is_customer = 'y', people_status = 'a' WHERE people_id=" . $approvement['people_id'] );

		// Create the data for the Transaction
		$customerData = new StdClass();
		$customerData->trans_date = $currentDate;
		$customerData->amount = $approvement->amount;
		$customerData->start_fee = $approvement->start_fee;
		$customerData->fee = $approvement->fee;
		$customerData->people_id = $approvement->people_id;
		$customerData->company_id = $approvement->company_id;
		$customerData->store_id = $approvement->store_id;
		$customerData->cr_id = $data->cr_id;
		$customerData->credit_id = $creditId;
		$customerData->ocrno = $ocrno;
		$customerData->invoice_filename = $invoice_filename;
		$customerData->sales_person_people_id = $approvement->sales_person_people_id;
		$customerData->receipt_number = $data->receipt_number;
		// Do the Transaction
		$verId = $this->entryCustomerCreditNew($customerData, 'inv');
		// Update credit record
		//$this->_Query("UPDATE credit SET first_invoice_ocrno='$ocrno', ver_id='$verId' WHERE credit_id = $creditId");

		// Update the invoice request item
		$request = array ();
		$request['credit_id'] = $creditId;
		$request['ver_id'] = $verId;
		$request['invoice_request_status'] = 'c';
		$resultUpdate = $this->_Update('invoice_request', 'invoice_request_id', $approvement->invoice_request_id, $request);

		$peopleObj = (object) $this->_Get("SELECT first_name, last_name, address, postcode, city, email FROM people WHERE people_id=" . $approvement->people_id);

		// Create data for first Invoice, that will be reurn to the c-api
		$shopInfoObj = $this->storeInfoGet($approvement->store_id);
		$receipt_number = $data->receipt_number;
		$reply = new StdClass();
		$reply->credit_id = $creditId;
		$reply->code = '1'; // loan
		$reply->invoice_filename = $invoice_filename;
		$reply->email = $peopleObj->email; // Was comment out after UC ?
		$reply->start_date = $currentDate;

		// Invoice data
		$reply->invoice = new StdClass();
		$reply->invoice->date = $currentDate;
		$reply->invoice->duedate = $dueDate;
		$reply->invoice->purchase_date = $currentDate;
		$reply->invoice->name = $peopleObj->first_name . ' ' . $peopleObj->last_name;
		$reply->invoice->people_id = $approvement->people_id;
		$reply->invoice->address = $peopleObj->address;
		$reply->invoice->postaddress = $peopleObj->postcode . ' ' . $peopleObj->city;
		$reply->invoice->ocrno = $ocrno;

		$reply->invoice->fee = number_format($approvement->fee, 2);
		$reply->invoice->start_fee = number_format($approvement->start_fee, 2);
		$reply->invoice->admin_fee = number_format($approvement->admin_fee, 2);

		$reply->invoice->company_name = $shopInfoObj->known_as; // Use Known as for invoce name
		$reply->invoice->shop_name = $shopInfoObj->store_name;
		$reply->invoice->receipt_number = $data->receipt_number;
		$reply->invoice->credit_amount = number_format($approvement->amount, 2);

		$total = $approvement->amount + $this->Setting->first_invoice_fee + $this->Setting->first_invoice_start_fee;
		$reply->invoice->total = number_format($total, 2);
		$reply->invoice->returnInvoice = "n";
		$reply->invoice->invoice_filename = $invoice_filename;
		$reply->invoice->credit_id = $creditId;
		$reply->invoice->grace_days = $this->Setting->credit_interest_grace_days;
		//$reply->invoice->effective_rate = $this->Setting->effective_rate;
		/*
		 $monthlyPaymentTotal = $this->_MonthlyPayment2($approvement->amount,
		 												$this->Setting->first_invoice_fee ,
		 												$this->Setting->first_invoice_start_fee,
														$this->Setting->customerInterest,
														$this->Setting->repayment_term,
														$this->Setting->monthly_invoice_fee,
														$this->Setting->administration_fee,
														$this->Setting->interest_grace_days
													);
		*/

		$monthlyPaymentTotal = $this->_MonthlyPayment2($approvement->amount,
			$this->Setting->first_invoice_fee,
			$this->Setting->first_invoice_start_fee,
			$this->Setting->customerInterest,
			$this->Setting->repayment_term,
			$this->Setting->monthly_invoice_fee,
			$this->Setting->administration_fee,
			$this->Setting->credit_interest_grace_days
		);

		$reply->invoice->monthly_payment_total = $monthlyPaymentTotal;
		$reply->invoice->monthly_no = $this->Setting->repayment_term;
		$reply->invoice->interest = $this->Setting->customerInterest;

		// --- FAKTURA SPEC
		if (!isset($data->spec_type)) {
			$reply->invoice->spec_type = '0';
			$reply->invoice->spec = 'Not given';
		}
		else {
			$reply->invoice->spec_type = $data->spec_type;
			$reply->invoice->spec = $data->spec;
		}


		// Insert the First invoice in the database
		$replyInvoice = $this->_Insert('first_invoice', $reply->invoice);
		if ($replyInvoice['code'] == "1")
			$invoice_id = $replyInvoice['id'];
		else {
			$reply = new StdClass();
			$reply->code = "0";
			$reply->denied_code = 'cant_insert_invoice';
			return json_encode($reply);
			die('');
		}

		$reply->invoice->effective_rate = $this->Setting->effective_rate;
		$reply->invoice->effective_total = $this->Setting->effective_total;

		$this->_Query("UPDATE credit SET first_invoice_ocrno='$ocrno', ver_id='$verId' , invoice_id = $invoice_id WHERE credit_id = $creditId");

		return json_encode($reply);
	}

	private function EntryCustomerCreditNew($data, $transType) {

		$booking = new StdClass();
		$booking->booking_date = $data->trans_date;
	   	$booking->booking_text = "New credit";
	    $booking->booking_type = "new-credit";
	    $booking->people_id = $data->people_id;
	    $booking->company_id = $data->company_id;
	    $booking->store_id = $data->store_id;
		$booking->cr_id = $data->cr_id;
	    $booking->sales_person_people_id = $data->sales_person_people_id;
	    $booking->credit_id = $data->credit_id;
	    $booking->invoice_filename = $data->invoice_filename;
	    $booking->ocrno = $data->ocrno;
		$booking->receipt_number = $data->receipt_number;
		$booking->_trans = array();

		// Start trans§ 1380 // Cusomer credit
		$trans = new StdClass();
		$trans->account_no = '1380';
		$trans->amount = +$data->amount;

		$trans->people_id = $data->people_id;
	   	$trans->company_id = $data->company_id;
		$trans->credit_id = $data->credit_id;

		$trans->trans_type = 'new-credit';
		array_push($booking->_trans, $trans);
		// Start trans 2981 // Vendors payable
		$trans = new StdClass();
		$trans->account_no = '2981';
		$trans->amount = -$data->amount;

		$trans->people_id = $data->people_id;
		$trans->company_id = $data->company_id;
		$trans->credit_id = $data->credit_id;

	 	$trans->trans_type = 'new-credit';
		array_push($booking->_trans, $trans);

		// Start trans 2498 Personal rabat
		$trans = new StdClass();
		$trans->account_no = '2498';
		$trans->amount = -($data->amount * $this->Setting->sales_person_rebate / 100);

		$trans->people_id = $data->people_id;
		$trans->company_id = $data->company_id;
		$trans->credit_id = $data->credit_id;

		$trans->trans_type = 'sales-reb';
		array_push($booking->_trans, $trans);
		// Start trans 2891 Venders Payable
		$trans = new StdClass();
		$trans->account_no = '2981'; // Vendors fee
		$trans->amount = +($data->amount * $this->Setting->sales_person_rebate / 100);

		$trans->people_id = $data->people_id;
		$trans->company_id = $data->company_id;
		$trans->credit_id = $data->credit_id;

		$trans->trans_type = 'sales-reb';
		array_push($booking->_trans, $trans);

		// Start trans 3593 Venders fee
		$trans = new StdClass();
		$trans->account_no = '3593'; // Vendors fee
		$trans->amount = -($data->amount * $this->Setting->vendor_fee / 100);

		$trans->people_id = $data->people_id;
		$trans->company_id = $data->company_id;
		$trans->credit_id = $data->credit_id;

		$trans->trans_type = 'vendor-fee';
		array_push($booking->_trans, $trans);
		// Start trans 2891 // Vendors payable
		$trans = new StdClass();
		$trans->account_no = '2981';
		$trans->amount = ($data->amount * $this->Setting->vendor_fee / 100);

		$trans->people_id = $data->people_id;
		$trans->company_id = $data->company_id;
		$trans->credit_id = $data->credit_id;

		$trans->trans_type = 'vendor-fee';
		array_push($booking->_trans, $trans);

		if ($data->start_fee > 0) {
			// Uppläggning avgift
			$trans = new StdClass();
			$trans->account_no = '1380';
			$trans->amount = +$data->start_fee;

			$trans->people_id = $data->people_id;
			// $trans->company_id = $data->company_id; // 2022-02-07
			$trans->credit_id = $data->credit_id;

			$trans->trans_type = 'start-fee';
			array_push($booking->_trans, $trans); 
			// Start trans 2981 // Vendors payable
			$trans = new StdClass();
			$trans->account_no = '3541';
			$trans->amount = -$data->start_fee;

			$trans->people_id = $data->people_id;
			// $trans->company_id = $data->company_id; // 2022-02-07
			$trans->credit_id = $data->credit_id;

			$trans->trans_type = 'start-fee';
			array_push($booking->_trans, $trans);
		}

		if ($data->fee > 0) {
			$trans = new StdClass();
			$trans->account_no = '1380';
			$trans->amount = +$data->fee;

			$trans->people_id = $data->people_id;
			// $trans->company_id = $data->company_id; // 2022-02-07
			$trans->credit_id = $data->credit_id;

			$trans->trans_type = 'billing-fee';
			array_push($booking->_trans, $trans);
			// Start trans 2981 // Vendors payable
			$trans = new StdClass();
			$trans->account_no = '3540';
			$trans->amount = -$data->fee;

			$trans->people_id = $data->people_id;
			// $trans->company_id = $data->company_id; // 2022-02-07
			$trans->credit_id = $data->credit_id;

			$trans->trans_type = 'billing-fee';
			array_push($booking->_trans, $trans);
		}
		//$bookingJson =  json_encode($booking);

		return $this->_Book($booking);

	}

	private function ocrnoCreate($ocrno) {
	    $sum = 0;
	    for ($i=0; $i < strlen($ocrno); $i++) {
	    // Even
	        if ($i % 2 == 0) {
	            $res = $ocrno[$i] * 2;
	            //echo 'even: ' . $ocrno[$i] . ' ';
	        } else {
	            $res = $ocrno[$i];
	        }

	        if ($res > 9) {
	            $res = $res -9;
	        }
	        //echo $sum . '<br>';
	        $sum = $sum + $res;
	    }
	    //echo $sum . '<br>';
	    $nerast10 = ceil($sum / 10) * 10;
	    //echo $nerast10 . '<br>';
	    $checksum =  $nerast10 - $sum;
	    $ocr_number = $ocrno . $checksum; // 11
	    return $ocr_number;
	}

	private function storeInfoGet($shop_id) {

		$sql = "SELECT s.store_name, c.company_name, c.known_as FROM store s, company c WHERE s.store_id = $shop_id AND s.company_id = c.company_id ";
		$result = $this->_Get($sql);
		return (object) $result;

	}

	/*
	private function verInsert($verData) {
		$sql = "INSERT INTO ver(trans_date, ver_text) VALUES ('$verData->trans_date', '$verData->ver_text')";
		//$this->_BeginTrans();
		$verReply = $this->_InsertSql($sql);
		if($verReply->status =! "1") {
			//$this->_Rollback()
			$reply = new StdClass();
			$reply->code = '4';
			$reply->denied_code = 'trans_insert_fail';
			return json_encode($reply);
			die ('');
		} else {
			$verId = $verReply['id'];
		}
		return $verId;

	}
	*/
}

/*
### Check
{
	"_group" : "InvoiceRequestConfirm",
	"_action" : "CheckAndSign",
	"_bankid" : "yes",
	"_bankid_personal_id_number" : "193303110682",
	"_bankid_text": "\rFAKTURA\r\rMMB Butiken AB (Hair Bar)\rMOOD Gallerian\rKöpesumma 3,000.00 kr\r\rRäntefritt 30 dagar\rAviavgift 29.00 kr\r\rKvittonummer _ReceiptNumber_\r \rMöjlig delbetalning\rLägsta månadsbelopp\r12 mån - ca 299, exklusive avgifter",
	"_approved_code": "AE865EE8-A4AF-C81B-B9EF-956D8EA19058",
	"receipt_number" : "A-1234-99"
}

{
	"code": "0,
	"denied_code": "no_approved_code"
}

Denied codes:
- no_approved_code
- no_valid_approved_code

## Complete
### Call
{
	"_group" : "InvoiceRequestConfirm",
	"_action" : "Complete",
	"_approved_code": "ADEBD824-F361-CAD0-303C-9D8C366DD4C5",
	"_order_ref" : "8c621767-906a-46f1-a1e1-64cbfd2d4de6",
	"signature" : "test-signature",
	"ocspResponse" : "test-ocsp",
	"receipt_number" : "A-1234-99",
	"cr_id" : "1"
}
*/
